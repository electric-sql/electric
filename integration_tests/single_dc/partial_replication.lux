[doc partial replication via electric_user_id filtering]

[global dprompt=\w+@\w+:(\S+)[\#\$]]
[global eprompt=iex\(\d+\)>\s]
[global user_id_1=5a9a8b1d-263d-4cad-90f8-9190396161d7]
[global user_id_2=cf415e79-9bc6-4452-b4a0-863c2ccc1d72]

[macro client_session client_id user_id]
    !provider = {Electric.Satellite.Auth.JWT, issuer: "dev.electric-sql.com", \
                    secret_key: Base.decode64!("AgT/MeUiP3SKzw5gC6BZKXk4t1ulnUvZy2d/O73R0sQ=")}
    ?$eprompt
    !{:ok, conn} = Electric.Test.SatelliteWsClient.connect_and_spawn( \
            [ auth: %{auth_provider: provider, user_id: "$user_id"}, \
                id: "$client_id", \
                debug: true, \
                sub: "0", \
                auto_in_sub: true, \
                format: :compact, \
                host: "electric_1", \
                auto_ping: :true \
            ])
    ?+$eprompt
    ?(.*) %Electric.Satellite.SatInStartReplicationReq{__uf__: \[], lsn: "", (.*)
    ?(.*) %Electric.Satellite.SatInStartReplicationResp{(.*)

    !Electric.Test.SatelliteWsClient.send_test_relation_owned(conn)
    ?:ok
[endmacro]

[include shared.luxinc]

[invoke setup]

[shell user_1_ws1]
    [invoke log "user 1: start session 1"]
    [invoke start_elixir_test 1]

    [local client_id=client_1_ws1]
    [invoke client_session $client_id $user_id_1]

[shell user_1_ws2]
    [invoke log "user 1: start session 2"]
    [invoke start_elixir_test 2]

    [local client_id=client_1_ws2]

    [invoke client_session $client_id $user_id_1]

[shell user_2_ws1]
    [invoke log "user 2: start session 1"]
    [invoke start_elixir_test 3]

    [local client_id=client_2_ws1]

    [invoke client_session $client_id $user_id_2]

[shell user_1_ws1]
    [invoke log "user 1: send data session 1"]

    [local lsn=1]

    !Electric.Test.SatelliteWsClient.send_new_owned_data( \
        conn, \
        "$lsn", \
        1666371_111_516, \
        "60aa740d-5e54-46d8-8ff8-be3beed6ca98", \
        "$user_id_1", \
        "user 1 data 1" \
    )
    ?:ok

[shell user_1_ws2]
    [invoke log "user 1: receive data session 2"]
    [timeout 20]
    ?%{.*commit_timestamp: 1666371111516
    # ?%Electric.Satellite.SatOpUpdate{.*row_data: \["60aa740d-5e54-46d8-8ff8-be3beed6ca98", "5a9a8b1d-263d-4cad-90f8-9190396161d7", "user 1 data 1"

[shell user_1_ws1]
    [invoke log "user 1: receive data session 1"]
    [local lsn=1]
    ?%{.*commit_timestamp: 1666371111516
    ?%Electric.Satellite.SatPingResp{.* lsn: "$lsn"}

[shell user_2_ws1]
    [invoke log "user 2: not receive user 1 data"]
    -%{.*commit_timestamp: 1666371111516

[shell user_2_ws1]
    [invoke log "user 2: send data"]
    [timeout 10]

    [local lsn=3]

    !Electric.Test.SatelliteWsClient.send_new_owned_data( \
        conn, \
        "$lsn", \
        1666371_333_516, \
        "1f922fbb-016b-40c3-aeb1-e52682f82241", \
        "$user_id_2", \
        "Hello from Satellite" \
    )
    ?:ok
    ?%{.*commit_timestamp: 1666371333516
    ?%Electric.Satellite.SatPingResp{.* lsn: "$lsn"}

[shell user_1_ws1]
    [invoke log "user 1: not receive user 2 data"]
    -%{.*commit_timestamp: 1666371333516

[shell user_1_ws2]
    [invoke log "user 1: not receive user 2 data"]
    -%{.*commit_timestamp: 1666371333516

[cleanup]
    [invoke teardown]
