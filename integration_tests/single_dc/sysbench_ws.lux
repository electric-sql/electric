[doc One-direction replication pg_1 -> pg_2]

[global fail_pattern=[Ee][Rr][Rr][Oo][Rr]]
[global psql=electric]
[global dprompt=\w+@\w+:(\S+)[\#\$]]
[global eprompt=iex\(\d+\)>\s]

[include shared.luxinc]

[invoke setup_pg_and_vaxine]

[shell sysbench_pg1]
    [invoke log "Prepare tables and generate data for PG1"]
    !make start_sysbench
    ?$dprompt
    [invoke sysbench_prepare pg_1 10 10]
    !exit
    [invoke ok]

[shell sysbench_pg2]
    [invoke log "Prepare tables for PG2"]
    !make start_sysbench
    ?$dprompt
    [invoke sysbench_prepare pg_2 0 10]
    !exit
    [invoke ok]

[shell vaxine]
    -$fail_pattern
#[shell electric]
#    -$fail_pattern

[invoke setup_rest]

[macro wait_table table]
    [invoke wait-for "select count(id) from ${table};" "  10" 10 $psql]
[endmacro]

[shell pg_2]
   # couldn't figure out quickly why loop in the loop was not reliable
   [invoke wait_table sbtest1]

[shell ws1]
    [invoke log "Start WS client and start consuming data"]
    [invoke start_elixir_test]
    !Electric.Test.SatelliteWsClient.connect_and_spawn( \
            [ \
            {:auth, %{user_id: "5a9a8b1d-263d-4cad-90f8-9190396161d7"}}, \
            {:id, "ws1"}, \
            {:sub, "0"}, \
            {:auto_in_sub, true}, \
            {:format, :compact}, \
            {:host, "electric_1"}, \
            {:auto_ping, :true} \
            ])
    ?$eprompt
    ?(.*) %Electric.Satellite.SatInStartReplicationReq{__uf__: \[], lsn: "", (.*)

[shell pg_2]
    [invoke log "Make sure we replicate all data from PG1 -> PG2"]
    [invoke wait_table sbtest2]
    [invoke wait_table sbtest3]
    [invoke wait_table sbtest4]
    [invoke wait_table sbtest5]
    [invoke wait_table sbtest6]
    [invoke wait_table sbtest7]
    [invoke wait_table sbtest8]
    [invoke wait_table sbtest9]
    [invoke wait_table sbtest10]

[shell ws1]
    [invoke log "Wait for sync up to current state"]
    ?\d+:\d+:\d+.\d+ \[info\]  rec \[13]: %{commit_timestamp: \d+, lsn: (.*), trans_id: "", update: 9}
    [local middle_lsn=$1]
    ?\d+:\d+:\d+.\d+ \[info\]  rec \[21]: %{commit_timestamp: \d+, lsn: (.*), trans_id: "", update: 9}

#
#[shell sysbench_pg1]
#    [invoke log "Start generating more data while WS client is subscribed"]
#    [timeout 15]
#    !make start_sysbench
#    ?$dprompt
#    [invoke sysbench_run pg_1 10 10]
#    !exit
#    [invoke ok]
#    [sleep 5]

[shell pg_2]
    [invoke log "Send new tx from PG2"]
    !INSERT INTO entries (content) VALUES ('Hello from a');
    ?INSERT 0 1

[shell ws1]
    [timeout 10]
    [invoke log "Wait for Satellite to receive transaction from PG2"]
    ?\d+:\d+:\d+.\d+ \[info\]  rec \[23]: %{commit_timestamp: \d+, lsn: (.*), trans_id: "", update: \d+}
    [local middle_lsn=$1]

    [invoke log "Send transaction with insert from Satellite"]
    !Electric.Test.SatelliteWsClient.send_test_relation()
    ?:ok
    !Electric.Test.SatelliteWsClient.send_new_data("1", 1666371243516, "1f922fbb-016b-40c3-aeb1-e52682f82241", "Hello from Satellite")
    ?:ok
    ?%Electric.Satellite.SatPingResp{.* lsn: "1"}

[shell electric]
    ?Hello from Satellite
[shell pg_2]
    [invoke wait-for "select * from entries;" "Hello from Satellite" 10 $psql]
[shell pg_1]
    [invoke wait-for "select * from entries;" "Hello from Satellite" 10 $psql]

[shell ws1]
    [invoke log "Send transaction with update from Satellite"]
    !Electric.Test.SatelliteWsClient.send_update_data("2", 1666371243516, "1f922fbb-016b-40c3-aeb1-e52682f82241", "How are you?")
    ?:ok
    ?%Electric.Satellite.SatPingResp{.* lsn: "2"}

[shell electric]
    ?How are you?
[shell pg_2]
    [invoke wait-for "select * from entries;" "How are you?" 10 $psql]
[shell pg_1]
    [invoke wait-for "select * from entries;" "How are you?" 10 $psql]

[shell ws1]
    [invoke log "Send transaction with delete from Satellite"]
    !Electric.Test.SatelliteWsClient.send_delete_data("3", 1666371243516, "1f922fbb-016b-40c3-aeb1-e52682f82241", "How are you?")
    ?:ok
    ?%Electric.Satellite.SatPingResp{.* lsn: "3"}

[shell electric]
    ?How are you?
[shell pg_2]
    [invoke wait-for "select * from entries;" "(1 row)" 10 $psql]
[shell pg_1]
    [invoke wait-for "select * from entries;" "(1 row)" 10 $psql]

[shell ws1]
    !Electric.Test.SatelliteWsClient.disconnect()
    ?:ok

#[shell electric]
#    !make stop_electric_1
#    [invoke ok]

#    !make start_electric_1
#    ?START_REPLICATION SLOT

#[shell ws1]
#    !Electric.Test.SatelliteWsClient.connect_and_spawn( \
#            [:auth, {:id, "ws1"}, {:sub, "eof"}, \
#            {:auto_in_sub, true}, \
#            {:format, :compact}, \
#            {:host, "electric_1"}, \
#            {:auto_ping, :true} \
#            ])
#    ?$eprompt
#    ?(.*) %Electric.Satellite.SatInStartReplicationReq{__uf__: \[], lsn: "3", (.*)

[cleanup]
    [invoke teardown]
