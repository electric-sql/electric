[doc Test for basic Satellite <> Electric interaction]

[global fail_pattern=[Ee][Rr][Rr][Oo][Rr]]
[global psql=electric]
[global node=>]
[global pg_id=f989b58b-980d-4d3c-b178-adb6ae8222f1]
[global migration_dir=m_sanity_check]

[include shared.luxinc]

[macro connect_to_electric host port]
    !client = await import('./dist/client.js')
    ?$node
    !migrations = await client.read_migrations(process.env.MIGRATION_DIRS + "/index.js")
    ?$node
    !db = await client.open_db( process.env.SATELLITE_DB_PATH + "/$LUX_SHELLNAME", \
                                "$host", \
                                $port, \
                                migrations)
    ?$node
[endmacro]

[macro setup_client satellite_number electric]
    [invoke start_satellite $satellite_number $migration_dir]
    !yarn node
    ?$node
    [invoke connect_to_electric $electric 5133]
[endmacro]

[macro migrate electric port pg vsn]
 [invoke log "Migrate ${pg} on ${electric} to version: ${vsn}"]
 [shell electric_migrate]
    !curl -v -X PUT http://localhost:${port}/api/migrations/${pg}  \
          -H 'Content-Type: application/json' -d '{"vsn":"${vsn}"}'
    ?HTTP/1.1 200 OK

 [shell ${electric}]
    ?.* origin=${pg} .* \[notice\] ready to migrate to version: ${vsn}
    ?.* origin=${pg} .* \[notice\] successfull migration to version: ${vsn}
    ?.* Successfully initialized origin ${pg}
[endmacro]

[macro node_await_get match]
    [invoke wait-for "client.get_items(db)" "${match}" 10 $node]
[endmacro]

[macro node_await_insert keys]
    !client.insert_item(db, ${keys})
    ?$node
[endmacro]

[macro node_await_get_other match]
    [invoke wait-for "client.get_other_items(db)" "${match}" 10 $node]
[endmacro]

[macro node_await_insert_other keys]
    !client.insert_other_item(db, ${keys})
    ?$node
[endmacro]


#===============================================================================
# Setup test
#===============================================================================
#
[invoke setup $migration_dir]

[shell electric_1]
    -$fail_pattern
[shell electric_2]
    -$fail_pattern

#===============================================================================
# Beginning of the actual test
#===============================================================================

[invoke log "Migrate Electric to the latest version"]

[invoke migrate electric_1 5050 postgres_1 1669232573_init]
[invoke migrate electric_1 5050 postgres_2 1669232573_init]
[invoke migrate electric_1 5050 postgres_1 1669232634_add_column]
[invoke migrate electric_1 5050 postgres_2 1669232634_add_column]
[invoke migrate electric_2 5051 postgres_3 1669232573_init]
[invoke migrate electric_2 5051 postgres_3 1669232634_add_column]

[invoke log "Electric migrated"]

[shell satellite_1]
    -$fail_pattern
    [invoke setup_client 1 "electric_1"]

[shell satellite_2]
    -$fail_pattern
    [invoke setup_client 2 "electric_2"]

[invoke log "Both satellites connected"]

#===============================================================================
# Verify that PG -> Satellite works
#==============================================================================

[global pg_id1=f989b58b-980d-4d3c-b178-adb6ae8222f1]
[global pg_id2=a7a7d9be-a51c-4f86-a4ff-dfdc0c016fe2]
[global pg_id3=4bc27df5-0a7e-4695-b386-e39ddab231a4]

[shell pg_1]
    [invoke log "Insert data into postgres_1"]
    !INSERT INTO public.items (id, content) VALUES ('${pg_id1}', 'hello from pg_1');
    ?$psql

[shell satellite_1]
    [invoke node_await_get ${pg_id1}]

[shell satellite_2]
    [invoke node_await_get ${pg_id1}]

[shell pg_3]
    [invoke log "Insert data into postgres_3"]
    !INSERT INTO public.items (id, content) VALUES ('${pg_id3}', 'hello from pg_3');
    ?$psql

[shell satellite_1]
    [invoke node_await_get ${pg_id3}]

[shell satellite_2]
    [invoke node_await_get ${pg_id3}]

#===============================================================================
# Verify that Satellite -> PG works
#===============================================================================

[shell satellite_1]
    [invoke node_await_insert "['hello from satellite_1']"]

[shell satellite_2]
    [invoke node_await_insert "['hello from satellite_2']"]

[loop pg pg_1 pg_2 pg_3]
  [shell ${pg}]
    [invoke log "Verify that ${pg} have received data from both Satellites"]
    [invoke wait-for "SELECT * FROM public.items;" "hello from satellite_1" 10 ${psql}]
    [invoke wait-for "SELECT * FROM public.items;" "hello from satellite_2" 10 ${psql}]
[endloop]

#===============================================================================
# Verify that replication works for multiple tables
#===============================================================================

[shell satellite_1]
    [invoke node_await_insert_other "['hello from satellite_1 other']"]

[shell satellite_2]
    [invoke node_await_insert_other "['hello from satellite_2 other']"]

[loop pg pg_1 pg_2 pg_3]
  [shell ${pg}]
    [invoke log "Verify that ${pg} have received data from both Satellites"]
    [invoke wait-for "SELECT * FROM public.other_items;" "hello from satellite_1 other" 10 ${psql}]
    [invoke wait-for "SELECT * FROM public.other_items;" "hello from satellite_2 other" 10 ${psql}]
[endloop]

[cleanup]
    [invoke teardown]
