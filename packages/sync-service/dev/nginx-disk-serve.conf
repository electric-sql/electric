worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/json;

    # Logging
    log_format shape_requests '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              'table=$arg_table offset=$arg_offset handle=$arg_handle live=$arg_live';

    access_log /var/log/nginx/shape_access.log shape_requests;
    error_log /var/log/nginx/shape_error.log warn;

    # Enable gzip compression for JSON responses
    gzip on;
    gzip_types application/json text/plain application/javascript;
    gzip_min_length 1000;
    gzip_vary on;
    gzip_comp_level 6;

    # Cache configuration for shape data
    proxy_cache_path /var/cache/nginx/shapes
                     levels=1:2
                     keys_zone=shape_cache:100m
                     max_size=10g
                     inactive=24h
                     use_temp_path=off;

    # Map to handle CORS
    map $request_method $cors_method {
        OPTIONS 1;
        default 0;
    }

    # Upstream for Electric service
    # This is required for live mode and metadata queries
    upstream electric_service {
        server localhost:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Variables to store Electric metadata responses
    map $upstream_http_x_electric_chunk_file $electric_chunk_file {
        default "";
    }

    map $upstream_http_x_electric_start_byte $electric_start_byte {
        default "";
    }

    map $upstream_http_x_electric_end_byte $electric_end_byte {
        default "";
    }

    server {
        listen 3002;
        server_name _;

        # Root directory where shape files are stored
        # Adjust this path to match your Electric shape storage directory
        set $shapes_root /var/lib/electric/shapes;

        # Add CORS headers for all responses
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'electric-handle, electric-offset, electric-cursor, electric-schema, electric-up-to-date, electric-snapshot, cache-control, etag' always;

        # Main shape endpoint
        location /v1/shape {
            # Handle OPTIONS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 86400;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Validate required parameters for GET requests
            if ($request_method = 'GET') {
                set $param_check "";

                if ($arg_table = "") {
                    set $param_check "missing_table";
                }

                if ($arg_offset = "") {
                    set $param_check "${param_check}_missing_offset";
                }

                # Return 400 if required params are missing
                if ($param_check ~ "missing") {
                    return 400 '{"message": "Missing required parameters: table and offset are required"}';
                }
            }

            # LIVE MODE: Proxy directly to Electric for long-polling
            # Live mode requires real-time updates and connection management
            # that only Electric can provide
            if ($arg_live = "true") {
                rewrite ^ /internal/proxy/live last;
            }

            # ALL OTHER REQUESTS: Query Electric metadata endpoint
            # Electric decides if nginx can serve from disk or if Electric should handle it
            # This includes:
            # - Initial requests (offset=-1)
            # - offset=now requests
            # - Requests without handles
            # - Subsequent requests with handles
            # Electric has full control over what can be served from disk
            rewrite ^ /internal/shape/with_metadata last;
        }

        # Proxy live mode requests to Electric
        location /internal/proxy/live {
            internal;

            # Live mode requires Electric's long-polling and real-time capabilities
            proxy_pass http://electric_service/v1/shape$is_args$args;
            proxy_http_version 1.1;

            # Preserve client information
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Long-polling timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            proxy_buffering off;

            # No caching for live requests
            proxy_cache off;
            proxy_no_cache 1;
            proxy_cache_bypass 1;

            # Add source header for debugging
            add_header X-Served-By "nginx-proxy-live" always;
        }

        # Query metadata and decide whether to serve from disk or proxy
        location /internal/shape/with_metadata {
            internal;

            # Query Electric for metadata about where to read from disk
            # Electric decides if this request can be served from disk or needs to be proxied
            auth_request /internal/electric/metadata;

            # Capture metadata response headers
            auth_request_set $electric_mode $upstream_http_x_electric_mode;
            auth_request_set $electric_file_path $upstream_http_x_electric_file_path;
            auth_request_set $electric_handle $upstream_http_electric_handle;
            auth_request_set $electric_offset $upstream_http_electric_offset;

            # If Electric says "proxy", redirect to proxy location
            # X-Electric-Mode: proxy means Electric needs to handle this request
            if ($electric_mode = "proxy") {
                rewrite ^ /internal/proxy/from_metadata last;
            }

            # Otherwise, serve from disk
            # X-Electric-Mode: disk (or not set) means serve from disk

            alias $shapes_root;

            # Try to serve the file Electric told us about
            # If electric_file_path is set, use it; otherwise try defaults
            try_files /$electric_file_path
                      /default/$arg_handle/snapshot_0.json
                      /default/$arg_handle/log.json
                      @fallback_to_electric;

            # Set appropriate headers from Electric's metadata response
            add_header 'Content-Type' 'application/json' always;
            add_header 'electric-handle' '$electric_handle' always;
            add_header 'electric-offset' '$electric_offset' always;
            add_header 'Cache-Control' 'public, max-age=3600, stale-while-revalidate=86400' always;
            add_header 'X-Served-By' 'nginx-disk' always;

            # Enable byte-range requests for large files
            aio threads;
            directio 4m;
            output_buffers 2 1m;
        }

        # Electric metadata endpoint (subrequest)
        location /internal/electric/metadata {
            internal;

            # Query Electric for metadata about the shape at this offset
            # Electric responds with headers indicating how to handle the request:
            #
            # Option 1 - Serve from disk:
            #   X-Electric-Mode: disk
            #   X-Electric-File-Path: default/3833821-1721812114261/snapshot_0.json
            #   X-Electric-Start-Byte: 0 (optional, for byte-range serving)
            #   X-Electric-End-Byte: 2048 (optional, for byte-range serving)
            #   electric-handle: 3833821-1721812114261
            #   electric-offset: 1002_3
            #
            # Option 2 - Proxy to Electric:
            #   X-Electric-Mode: proxy
            #   (nginx will proxy the full request to Electric)
            #
            # If metadata request fails, nginx falls back to proxying

            proxy_pass http://electric_service/v1/shape/metadata$is_args$args;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Content-Length "";

            proxy_pass_request_body off;

            # Short timeout for metadata queries
            proxy_connect_timeout 2s;
            proxy_read_timeout 5s;

            # If metadata fails, we'll fallback to proxy
            # The auth_request mechanism will trigger error handlers
        }

        # Proxy to Electric when metadata says so
        location /internal/proxy/from_metadata {
            internal;

            # Electric's metadata endpoint indicated this request needs proxying
            # This could be because:
            # - Shape doesn't exist yet (offset=-1 creating new shape)
            # - Shape is being rebuilt
            # - Requested offset not available on disk yet
            # - Electric wants to handle this request for any other reason

            proxy_pass http://electric_service/v1/shape$is_args$args;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Standard timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Enable caching for proxied responses
            proxy_cache shape_cache;
            proxy_cache_key "$request_uri";
            proxy_cache_valid 200 1h;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;

            add_header X-Served-By "nginx-proxy-metadata" always;
            add_header X-Proxy-Cache $upstream_cache_status always;
        }

        # Fallback to Electric when disk serving fails
        location @fallback_to_electric {
            proxy_pass http://electric_service/v1/shape$is_args$args;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Standard timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Enable caching
            proxy_cache shape_cache;
            proxy_cache_key "$request_uri";
            proxy_cache_valid 200 1h;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;

            add_header X-Served-By "nginx-fallback" always;
            add_header X-Proxy-Cache $upstream_cache_status always;
        }

        # Static file serving for pre-computed shape responses
        # This location serves pre-generated JSON files that match specific query patterns
        location /v1/shape/static/ {
            alias $shapes_root/static/;

            # Serve static JSON files that have been pre-generated
            # File naming convention: {table}_{offset}_{params_hash}.json

            default_type application/json;

            # Enable caching for static shape responses
            add_header 'Cache-Control' 'public, max-age=3600, stale-while-revalidate=86400' always;

            # Enable byte-range requests
            aio threads;
            directio 4m;

            # Fallback to 404 if file doesn't exist
            try_files $uri =404;
        }

        # DELETE endpoint - proxy to Electric
        location ~ ^/v1/shape$ {
            limit_except GET HEAD OPTIONS {
                # DELETE requests must go through Electric
                proxy_pass http://electric_service;
                proxy_http_version 1.1;

                proxy_set_header Host $host;
                proxy_set_header Connection "";
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                add_header X-Served-By "nginx-proxy-delete" always;
            }
        }

        # Health check endpoint
        location /health {
            access_log off;
            default_type text/plain;
            return 200 "OK\n";
        }

        # Serve Electric API documentation
        location /docs {
            alias /usr/share/nginx/html/docs;
            index index.html;
            default_type text/html;
        }

        # Default location - return API info
        location / {
            default_type application/json;
            return 200 '{
                "service": "Electric Shape Server - Disk Mode",
                "version": "1.0.0",
                "endpoints": {
                    "shapes": "/v1/shape",
                    "health": "/health"
                },
                "note": "This server serves Electric Shape data from disk storage"
            }';
        }

        # Custom error responses
        error_page 400 /errors/400.json;
        error_page 404 /errors/404.json;
        error_page 500 502 503 504 /errors/5xx.json;

        location /errors/ {
            internal;
            default_type application/json;
        }
    }

    # Additional server block for TLS (optional)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #
    #     # Include all location blocks from above
    #     include /etc/nginx/conf.d/shape-locations.conf;
    # }
}
