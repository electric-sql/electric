worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/json;

    # Logging
    log_format shape_requests '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              'table=$arg_table offset=$arg_offset handle=$arg_handle live=$arg_live';

    access_log /var/log/nginx/shape_access.log shape_requests;
    error_log /var/log/nginx/shape_error.log warn;

    # Enable gzip compression for JSON responses
    gzip on;
    gzip_types application/json text/plain application/javascript;
    gzip_min_length 1000;
    gzip_vary on;
    gzip_comp_level 6;

    # Cache configuration for shape data
    proxy_cache_path /var/cache/nginx/shapes
                     levels=1:2
                     keys_zone=shape_cache:100m
                     max_size=10g
                     inactive=24h
                     use_temp_path=off;

    # Map to handle CORS
    map $request_method $cors_method {
        OPTIONS 1;
        default 0;
    }

    # Upstream for fallback to Electric service (optional)
    upstream electric_service {
        server localhost:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    server {
        listen 3002;
        server_name _;

        # Root directory where shape files are stored
        # Adjust this path to match your Electric shape storage directory
        set $shapes_root /var/lib/electric/shapes;

        # Add CORS headers for all responses
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'electric-handle, electric-offset, electric-cursor, electric-schema, electric-up-to-date, electric-snapshot, cache-control, etag' always;

        # OPTIONS preflight handling
        location /v1/shape {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 86400;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # GET requests - serve shape data from disk
            if ($request_method = 'GET') {
                # Validate required parameters
                set $param_check "";

                if ($arg_table = "") {
                    set $param_check "missing_table";
                }

                if ($arg_offset = "") {
                    set $param_check "${param_check}_missing_offset";
                }

                # Return 400 if required params are missing
                if ($param_check ~ "missing") {
                    return 400 '{"message": "Missing required parameters: table and offset are required"}';
                }

                # Process the request based on offset value
                # offset=-1: Initial sync request
                # offset=now: Start from current position
                # offset={tx}_{op}: Continue from specific position

                # Route to appropriate handler based on live parameter
                rewrite ^ /internal/shape/serve last;
            }

            # DELETE requests - delete shape data (requires configuration)
            if ($request_method = 'DELETE') {
                return 501 '{"message": "Shape deletion from static files requires backend processing"}';
            }

            return 405 '{"message": "Method not allowed"}';
        }

        # Internal location for serving shape data
        location /internal/shape/serve {
            internal;

            # Construct file path based on handle
            # Format: $shapes_root/{stack_id}/{shape_handle}/

            # For requests with a handle, serve from that shape's directory
            if ($arg_handle != "") {
                rewrite ^ /internal/shape/with_handle last;
            }

            # For initial requests (offset=-1 or offset=now), need to:
            # 1. Determine the shape handle from table parameters
            # 2. Serve the appropriate snapshot or log file
            # Since we can't compute the handle in nginx, fallback or return error

            return 501 '{"message": "Initial shape requests require shape handle computation - consider proxying to Electric service"}';
        }

        # Serve shape data when handle is provided
        location /internal/shape/with_handle {
            internal;

            # Extract shape handle from query parameter
            # Shape handle format: {hash}-{timestamp}

            # Determine which file to serve based on offset
            set $shape_path "$shapes_root/default/$arg_handle";

            # For live requests, return empty with up-to-date message
            if ($arg_live = "true") {
                rewrite ^ /internal/shape/live last;
            }

            # For non-live requests, serve snapshot or log chunks
            # Default to serving the log file
            rewrite ^ /internal/shape/snapshot last;
        }

        # Serve snapshot files
        location /internal/shape/snapshot {
            internal;

            # Serve JSON snapshot files
            # Path: $shapes_root/{stack_id}/{handle}/snapshot_{chunk}.json

            alias $shapes_root;

            # Try to serve snapshot file, fallback to log file
            try_files /default/$arg_handle/snapshot_0.json
                      /default/$arg_handle/log
                      =404;

            # Set appropriate headers
            add_header 'Content-Type' 'application/json' always;
            add_header 'electric-handle' '$arg_handle' always;
            add_header 'Cache-Control' 'public, max-age=3600, stale-while-revalidate=86400' always;

            # Enable byte-range requests for large files
            aio threads;
            directio 4m;
            output_buffers 2 1m;
        }

        # Handle live mode requests
        location /internal/shape/live {
            internal;

            # For live requests, we need to:
            # 1. Check if there's new data since the provided offset
            # 2. Either return new data or hold the connection
            #
            # Since nginx can't easily watch files or hold connections waiting for changes,
            # live mode should typically be proxied to the Electric service

            # Return up-to-date control message
            default_type application/json;
            return 200 '[{"headers":{"control":"up-to-date"}}]';

            add_header 'electric-handle' '$arg_handle' always;
            add_header 'electric-offset' '$arg_offset' always;
            add_header 'electric-up-to-date' 'true' always;
            add_header 'Cache-Control' 'no-cache, no-store, must-revalidate' always;
        }

        # Static file serving for pre-computed shape responses
        # This location serves pre-generated JSON files that match specific query patterns
        location /v1/shape/static/ {
            alias $shapes_root/static/;

            # Serve static JSON files that have been pre-generated
            # File naming convention: {table}_{offset}_{params_hash}.json

            default_type application/json;

            # Enable caching for static shape responses
            add_header 'Cache-Control' 'public, max-age=3600, stale-while-revalidate=86400' always;

            # Enable byte-range requests
            aio threads;
            directio 4m;

            # Fallback to 404 if file doesn't exist
            try_files $uri =404;
        }

        # Fallback location - proxy to Electric service
        location /v1/fallback/ {
            # If serving from disk fails, optionally fallback to Electric service

            proxy_pass http://electric_service/v1/shape/;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Preserve query parameters
            proxy_pass_request_headers on;

            # Timeout settings for long-polling
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # Enable caching
            proxy_cache shape_cache;
            proxy_cache_key "$request_uri";
            proxy_cache_valid 200 1h;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;

            # Add cache status header
            add_header X-Proxy-Cache $upstream_cache_status;
        }

        # Health check endpoint
        location /health {
            access_log off;
            default_type text/plain;
            return 200 "OK\n";
        }

        # Serve Electric API documentation
        location /docs {
            alias /usr/share/nginx/html/docs;
            index index.html;
            default_type text/html;
        }

        # Default location - return API info
        location / {
            default_type application/json;
            return 200 '{
                "service": "Electric Shape Server - Disk Mode",
                "version": "1.0.0",
                "endpoints": {
                    "shapes": "/v1/shape",
                    "health": "/health"
                },
                "note": "This server serves Electric Shape data from disk storage"
            }';
        }

        # Custom error responses
        error_page 400 /errors/400.json;
        error_page 404 /errors/404.json;
        error_page 500 502 503 504 /errors/5xx.json;

        location /errors/ {
            internal;
            default_type application/json;
        }
    }

    # Additional server block for TLS (optional)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #
    #     # Include all location blocks from above
    #     include /etc/nginx/conf.d/shape-locations.conf;
    # }
}
