import { execSync } from 'child_process'
import { writeFileSync, readFileSync, existsSync } from 'fs'
import { join } from 'path'
import { ElectricCredentials } from './electric-api'

export async function setupTemplate(
  appName: string,
  credentials: ElectricCredentials
): Promise<void> {
  const appPath = join(process.cwd(), appName)

  try {
    // Step 1: Pull TanStack Start template using gitpick
    console.log(`Pulling template...`)
    execSync(
      `npx gitpick electric-sql/electric/tree/main/examples/tanstack-db-web-starter ${appName}`,
      { stdio: `inherit` }
    )

    // Step 2: Generate .env file with credentials
    console.log(`Configuring environment...`)
    const envContent = `# Electric SQL Configuration
# Generated by @electric-sql/quickstart
# DO NOT COMMIT THIS FILE

DATABASE_URL=${credentials.DATABASE_URL}
ELECTRIC_SECRET=${credentials.secret}
ELECTRIC_SOURCE_ID=${credentials.source_id}
`

    writeFileSync(join(appPath, `.env`), envContent)

    // Step 3: Ensure .gitignore includes .env
    console.log(`Updating .gitignore...`)
    const gitignorePath = join(appPath, `.gitignore`)
    let gitignoreContent = ``

    if (existsSync(gitignorePath)) {
      gitignoreContent = readFileSync(gitignorePath, `utf8`)
    }

    if (!gitignoreContent.includes(`.env`)) {
      gitignoreContent += `\n# Environment variables\n.env\n.env.local\n.env.*.local\n`
      writeFileSync(gitignorePath, gitignoreContent)
    }

    // Step 4: Copy shared tsconfig.json if it doesn't exist
    const tsconfigPath = join(appPath, `tsconfig.json`)
    if (!existsSync(tsconfigPath)) {
      console.log(`Setting up TypeScript configuration...`)
      // Use a basic tsconfig.json template instead of copying from parent
      const tsconfigContent = JSON.stringify(
        {
          compilerOptions: {
            target: `es2020`,
            module: `commonjs`,
            moduleResolution: `node`,
            strict: true,
            esModuleInterop: true,
            allowSyntheticDefaultImports: true,
            skipLibCheck: true,
            types: [`node`],
          },
          include: [`src/**/*`],
          exclude: [`node_modules`, `dist`],
        },
        null,
        2
      )
      writeFileSync(tsconfigPath, tsconfigContent)
    }

    // Step 5: Extend package.json with additional scripts
    console.log(`Adding Electric commands...`)
    const packageJsonPath = join(appPath, `package.json`)

    if (existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(readFileSync(packageJsonPath, `utf8`))

      // Add Electric-specific scripts
      packageJson.scripts = {
        ...packageJson.scripts,
        psql: `node -e "require(\\"child_process\\").execSync(\\"psql $DATABASE_URL\\", {stdio: \\"inherit\\"})"`,
        claim: `node -e "require(\\"./electric-commands\\").claim()"`,
        deploy: `NITRO_PRESET=netlify pnpm build && netlify deploy --prod --dir=dist --functions=.netlify/functions-internal`,
      }

      writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))
    }

    // Step 6: Create electric-commands.js helper file
    console.log(`Setting up command helpers...`)
    const electricCommandsContent = `const { execSync } = require('child_process');
const fetch = require('node-fetch');

async function claim() {
  const { ELECTRIC_SOURCE_ID, ELECTRIC_SECRET } = process.env;
  
  if (!ELECTRIC_SOURCE_ID || !ELECTRIC_SECRET) {
    console.error('Missing ELECTRIC_SOURCE_ID or ELECTRIC_SECRET environment variables');
    console.error('Make sure .env file exists and contains Electric credentials');
    process.exit(1);
  }

  try {
    const response = await fetch('https://api.electric-sql.com/v1/claim', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': \`Bearer \${ELECTRIC_SECRET}\`,
        'User-Agent': '@electric-sql/quickstart'
      },
      body: JSON.stringify({
        source_id: ELECTRIC_SOURCE_ID
      })
    });

    if (!response.ok) {
      throw new Error(\`Electric API error: \${response.status} \${response.statusText}\`);
    }

    const result = await response.json();
    
    console.log('Resource claim initiated');
    console.log('');
    console.log('Open this URL in your browser to complete the claiming process:');
    console.log(result.claimUrl);
    console.log('');
    console.log('This will:');
    console.log('- Link Electric Cloud account');
    console.log('- Link Neon database account'); 
    console.log('- Transfer temporary resources');
    
  } catch (error) {
    console.error('Failed to initiate resource claim:', error.message);
    process.exit(1);
  }
}

module.exports = { claim };
`

    writeFileSync(
      join(appPath, `electric-commands.js`),
      electricCommandsContent
    )

    console.log(`Template setup complete`)
  } catch (error) {
    throw new Error(
      `Template setup failed: ${error instanceof Error ? error.message : error}`
    )
  }
}
