name: Deploy Examples

on:
  push:
    branches: ["main"]
  pull_request:
    paths: ["examples/*/**"]

concurrency:
  group: ${{ github.event_name == 'push' && 'prod-deploy-group' || format('examples-pr-{0}', github.event.number) }}

jobs:
  deploy:
    name: Deploy ${{ matrix.example.name }}
    environment: ${{ github.event_name == 'push' && 'Production' || 'Pull request' }}
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        example:
          - name: yjs
            path: examples/yjs
          - name: linearlite-read-only
            path: examples/linearlite-read-only
          - name: write-patterns
            path: examples/write-patterns
          - name: nextjs
            path: examples/nextjs
          - name: todo-app
            path: examples/todo-app
          - name: proxy-auth
            path: examples/proxy-auth

    outputs:
      website_url: ${{ steps.deploy.outputs.website_url }}
      example_name: ${{ matrix.example.name }}

    env:
      DEPLOY_ENV: ${{ github.event_name == 'push' && 'production' || format('pr-{0}', github.event.number) }}
      SHARED_INFRA_VPC_ID: ${{ vars.SHARED_INFRA_VPC_ID }}
      SHARED_INFRA_CLUSTER_ARN: ${{ vars.SHARED_INFRA_CLUSTER_ARN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_DEFAULT_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_DEFAULT_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
      NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
      ELECTRIC_API: ${{ secrets.ELECTRIC_API }}
      ELECTRIC_ADMIN_API: ${{ secrets.ELECTRIC_ADMIN_API }}
      ELECTRIC_TEAM_ID: ${{ secrets.ELECTRIC_TEAM_ID }}
      ELECTRIC_ADMIN_API_AUTH_TOKEN: ${{ secrets.ELECTRIC_ADMIN_API_AUTH_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".tool-versions"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache SST state
        uses: actions/cache@v4
        with:
          path: .sst
          key: sst-cache-${{ matrix.example.name }}-${{ runner.os }}
          restore-keys: |
            sst-cache-${{ matrix.example.name }}-${{ runner.os }}

      - name: Deploy
        id: deploy
        working-directory: ./${{ matrix.example.path }}
        run: |
          pnpm --filter @electric-sql/client --filter @electric-sql/experimental --filter @electric-sql/react run build
          pnpm sst deploy --stage ${{ env.DEPLOY_ENV }}

          if [ -f ".sst/outputs.json" ]; then
            website=$(jq -r '.website' .sst/outputs.json)
            echo "${{ matrix.example.name }}=$website" >> $GITHUB_OUTPUT
          else
            echo "sst outputs file not found. Exiting."
            exit 123
          fi

  comment:
    if: github.event_name == 'pull_request'
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Create PR comment with deployment URLs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployments = [
              { name: 'yjs', url: '${{ needs.deploy.outputs.yjs }}' },
              { name: 'linearlite-read-only', url: '${{ needs.deploy.outputs.linearlite-read-only }}' },
              { name: 'write-patterns', url: '${{ needs.deploy.outputs.write-patterns }}' },
              { name: 'nextjs', url: '${{ needs.deploy.outputs.nextjs }}' },
              { name: 'todo-app', url: '${{ needs.deploy.outputs.todo-app }}' },
              { name: 'proxy-auth', url: '${{ needs.deploy.outputs.proxy-auth }}' },
            ];

            const commentBody = [
              "## Examples",
              ...deployments.map(d => `- ${d.name}: ${d.url || '*deploy failed or missing output*'}`),
            ].join('\n');

            const prNumber = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment => comment.user.login ==='github-actions[bot]' && comment.body.startsWith("## Examples"));

            if (existingComment) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              // Create a new comment if none exists
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
            }
