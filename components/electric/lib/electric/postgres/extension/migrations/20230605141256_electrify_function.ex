defmodule Electric.Postgres.Extension.Migrations.Migration_20230605141256_ElectrifyFunction do
  alias Electric.Postgres.Extension

  require EEx

  @behaviour Extension.Migration

  sql_file = Path.expand("20230605141256_electrify_function/electrify.sql", __DIR__)

  @external_resource sql_file

  @impl true
  def version, do: 2023_06_05_14_12_56

  @impl true
  def up(schema) do
    electrified_table = Extension.electrified_table()
    electrified_index = Extension.electrified_index()
    publication = Extension.publication_name()
    event_triggers = Extension.event_triggers()

    event_trigger_tags =
      ["'ALTER TABLE'"] ++ for obj <- ["TABLE", "INDEX", "VIEW"], do: "'DROP #{obj}'"

    electrify_function =
      electrify_function_sql(
        schema,
        electrified_table,
        Extension.electrified_index(),
        publication,
        Extension.add_table_to_publication_sql("%I.%I")
      )

    [
      """
      CREATE TABLE #{electrified_table} (
          id          int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          schema_name text NOT NULL,
          table_name  text NOT NULL,
          oid         oid NOT NULL,
          created_at  timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT unique_table_name UNIQUE (schema_name, table_name)
      );
      """,
      """
      CREATE INDEX electrified_table_name_idx ON #{electrified_table} (table_name);
      CREATE INDEX electrified_table_name_oid ON #{electrified_table} (oid);
      """,
      """
      CREATE TABLE #{electrified_index} (
          id          oid NOT NULL PRIMARY KEY,
          table_id    int8 NOT NULL REFERENCES #{electrified_table} (id) ON DELETE CASCADE,
          created_at  timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP
      );
      """,
      Extension.add_table_to_publication_sql(electrified_table),
      electrify_function,
      """
      CREATE EVENT TRIGGER #{event_triggers[:sql_drop]} ON sql_drop
          WHEN TAG IN (#{Enum.join(event_trigger_tags, ", ")}) 
          EXECUTE FUNCTION #{schema}.ddlx_sql_drop_handler();
      """
    ]
  end

  @impl true
  def down(_schema) do
    []
  end

  EEx.function_from_file(:defp, :electrify_function_sql, sql_file, [
    :schema,
    :electrified_table,
    :electrified_index,
    :publication_name,
    :publication_sql
  ])
end
