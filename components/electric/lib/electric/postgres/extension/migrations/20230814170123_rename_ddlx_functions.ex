defmodule Electric.Postgres.Extension.Migrations.Migration_20230814170123_RenameDDLX do
  @moduledoc """
  The ddlx functions we created early on conflict with the "DDLX" names we settled on 
  for the extensions to the pg syntax.
  """
  alias Electric.Postgres.Extension

  require EEx

  @behaviour Extension.Migration

  # the `ddls-14.sql` file is generated by the scripts in
  # https://github.com/electric-sql/pgddl see the `README-electric.md` file for
  # reasons and instructions.
  sql_file = Path.expand("20230814170123_rename_ddlx_functions/ddlgen-14.sql.eex", __DIR__)

  @external_resource sql_file
  @split_exp "CREATE OR REPLACE FUNCTION"
  @ddlx_functions [
    "ddlx_alter(oid, text[])",
    "ddlx_alter_database(oid)",
    "ddlx_alter_owner(oid)",
    "ddlx_alter_role(regrole)",
    "ddlx_alter_role_auth(oid)",
    "ddlx_alter_sequence(regclass)",
    "ddlx_alter_table_defaults(regclass)",
    "ddlx_alter_table_rls(regclass)",
    "ddlx_alter_table_settings(regclass)",
    "ddlx_alter_table_storage(regclass)",
    "ddlx_apropos",
    "ddlx_banner",
    "ddlx_comment(oid)",
    "ddlx_create(oid, text[])",
    "ddlx_create_access_method(oid)",
    "ddlx_create_aggregate(regproc)",
    "ddlx_create_amop(oid)",
    "ddlx_create_amproc(oid)",
    "ddlx_create_cast(oid)",
    "ddlx_create_class(regclass, text[])",
    "ddlx_create_collation(oid, text[])",
    "ddlx_create_constraint(oid)",
    "ddlx_create_constraints(regclass)",
    "ddlx_create_conversion(oid)",
    "ddlx_create_database(oid)",
    "ddlx_create_default(oid)",
    "ddlx_create_event_trigger(oid)",
    "ddlx_create_extension(oid, text[])",
    "ddlx_create_foreign_data_wrapper(oid)",
    "ddlx_create_function(regproc)",
    "ddlx_create_index(regclass,ddlx_options text[])",
    "ddlx_create_indexes(regclass,ddlx_options text[])",
    "ddlx_create_language(oid)",
    "ddlx_create_operator(regoper)",
    "ddlx_create_operator(regoperator)",
    "ddlx_create_operator_class(oid)",
    "ddlx_create_operator_family(oid)",
    "ddlx_create_policy(oid)",
    "ddlx_create_publication(oid)",
    "ddlx_create_role(regrole)",
    "ddlx_create_rule(oid)",
    "ddlx_create_rules(regclass)",
    "ddlx_create_schema(regnamespace, text[])",
    "ddlx_create_sequence(regclass, text[])",
    "ddlx_create_server(oid, text[])",
    "ddlx_create_subscription(oid)",
    "ddlx_create_table(regclass, text[])",
    "ddlx_create_tablespace(oid)",
    "ddlx_create_text_search_config(regconfig)",
    "ddlx_create_text_search_dict(regdictionary)",
    "ddlx_create_text_search_parser(oid)",
    "ddlx_create_text_search_template(oid)",
    "ddlx_create_transform(oid)",
    "ddlx_create_trigger(oid)",
    "ddlx_create_triggers(regclass)",
    "ddlx_create_type(regtype, text[])",
    "ddlx_create_type_base(regtype)",
    "ddlx_create_type_domain(regtype)",
    "ddlx_create_type_enum(regtype)",
    "ddlx_create_type_range(regtype)",
    "ddlx_create_type_shell(regtype)",
    "ddlx_create_user_mapping(oid, text[])",
    "ddlx_create_view(regclass, text[])",
    "ddlx_createonly(oid, text[])",
    "ddlx_definitions",
    "ddlx_describe",
    "ddlx_drop(oid,ddlx_options text[])",
    "ddlx_drop_amop(oid)",
    "ddlx_drop_amproc(oid)",
    "ddlx_drop_constraint(oid)",
    "ddlx_drop_default(oid)",
    "ddlx_drop_trigger(oid)",
    "ddlx_get_constraints",
    "ddlx_get_functions",
    "ddlx_get_indexes",
    "ddlx_get_rules",
    "ddlx_get_triggers",
    "ddlx_grants(oid)",
    "ddlx_grants(regclass)",
    "ddlx_grants(regproc)",
    "ddlx_grants(regrole)",
    "ddlx_grants_columns(regclass)",
    "ddlx_identify",
    "ddlx_script(oid, ddlx_options text[])",
    "ddlx_script(sql_identifier text, ddlx_options text[])",
    "ddlx_script_parts",
    "ddlx_table_constraints(regclass, OUT sql text)"
  ]

  @impl true
  def version, do: 2023_08_14_170123

  @impl true
  def up(schema) do
    remove_functions =
      Enum.map(@ddlx_functions, &"DROP FUNCTION IF EXISTS #{schema}.#{&1} CASCADE;")

    ddlgen_sql = ddlgen_sql(schema)

    functions =
      ddlgen_sql
      |> String.split(@split_exp)
      |> Enum.slice(1..-1)
      |> Enum.map(&(@split_exp <> &1))

    remove_functions ++ functions ++ overrides(schema)
  end

  # rather than add too many modifications to the upstream functions, just overwrite
  # some functions that output stuff we don't want.
  defp overrides(schema) do
    [
      # ddlgen_comment adds `COMMENT ON` statements that we don't want or support
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_comment(oid) RETURNS text LANGUAGE sql AS $function$
          select ''::text;
      $function$ strict;
      """,
      # this just outputs a comment header, but it's just noise we don't want
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_banner(name text, kind text, namespace text, owner text, extra text default null)
      RETURNS text LANGUAGE sql AS $function$
         select ''::text;
      $function$;
      """,
      # this function appends a list of constraints as alter table commands
      # after table definitions. our patch moves those into the create table
      # block so just remove
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_create_constraints(regclass)
        RETURNS text LANGUAGE sql AS $function$
          SELECT NULL;
      $function$ strict;
      """,
      # this function adds a bunch of alter table add default commands
      # after table definitions. our patch moves those into the create table
      # block so just remove. sqlite doesn't support ALTER TABLE SET DEFAULT
      # so we need to fix.
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_alter_table_defaults(regclass)
        RETURNS text LANGUAGE sql AS $function$
          SELECT NULL;
      $function$ strict;

      """
    ]
  end

  @impl true
  def down(_schema) do
    []
  end

  EEx.function_from_file(:defp, :ddlgen_sql, sql_file, [
    :schema
  ])
end
