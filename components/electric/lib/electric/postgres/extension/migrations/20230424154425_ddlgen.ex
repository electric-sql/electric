defmodule Electric.Postgres.Extension.Migrations.Migration_20230424154425_DDLGen do
  alias Electric.Postgres.Extension

  require EEx

  @behaviour Extension.Migration

  # the `ddls-14.sql` file is generated by the scripts in
  # https://github.com/electric-sql/pgddl see the `README-electric.md` file for
  # reasons and instructions.
  sql_file = Path.expand("20230424154425_ddlgen/ddlgen-14.sql.eex", __DIR__)

  @external_resource sql_file
  @split_exp "CREATE OR REPLACE FUNCTION"

  @impl true
  def version, do: 2023_04_24_15_44_25

  @impl true
  def up(schema) do
    ddlgen_sql = ddlgen_sql(schema)

    functions =
      ddlgen_sql
      |> String.split(@split_exp)
      |> Enum.slice(1..-1)
      |> Enum.map(&(@split_exp <> &1))

    functions ++ overrides(schema)
  end

  # rather than add too many modifications to the upstream functions, just overwrite
  # some functions that output stuff we don't want.
  defp overrides(schema) do
    [
      # ddlgen_comment adds `COMMENT ON` statements that we don't want or support
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_comment(oid) RETURNS text LANGUAGE sql AS $function$
          select ''::text;
      $function$ strict;
      """,
      # this just outputs a comment header, but it's just noise we don't want
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_banner(name text, kind text, namespace text, owner text, extra text default null)
      RETURNS text LANGUAGE sql AS $function$
         select ''::text;
      $function$;
      """,
      # this function appends a list of constraints as alter table commands
      # after table definitions. our patch moves those into the create table
      # block so just remove
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_create_constraints(regclass)
        RETURNS text LANGUAGE sql AS $function$
          SELECT NULL;
      $function$ strict;
      """,
      # this function adds a bunch of alter table add default commands
      # after table definitions. our patch moves those into the create table
      # block so just remove. sqlite doesn't support ALTER TABLE SET DEFAULT
      # so we need to fix.
      """
      CREATE OR REPLACE FUNCTION #{schema}.ddlgen_alter_table_defaults(regclass)
        RETURNS text LANGUAGE sql AS $function$
          SELECT NULL;
      $function$ strict;

      """
    ]
  end

  @impl true
  def down(_schema) do
    []
  end

  EEx.function_from_file(:defp, :ddlgen_sql, sql_file, [
    :schema
  ])
end
