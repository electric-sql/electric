defmodule Electric.Postgres.Extension.Migrations.Migration_20230328113927 do
  alias Electric.Postgres.Extension

  @behaviour Extension.Migration

  @impl true
  def version, do: 2023_03_28_11_39_27

  @impl true
  def up(_schema) do
    ddl_table = Extension.ddl_table()
    schema_table = Extension.schema_table()
    version_table = Extension.version_table()
    publication_name = Extension.publication_name()
    txid_type = Extension.txid_type()

    [
      """
      CREATE TABLE #{version_table} (
          txid #{txid_type} NOT NULL,
          txts timestamp with time zone NOT NULL,
          version varchar(255) NOT NULL,
          PRIMARY KEY (txid, txts),
          CONSTRAINT "migration_unique_version" UNIQUE (version),
          CONSTRAINT "migration_unique_fk" UNIQUE (txid, txts, version)
      );
      """,
      ##################
      """
      CREATE TABLE #{ddl_table} (
          id int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          txid #{txid_type} NOT NULL,
          txts timestamp with time zone NOT NULL,
          version varchar(255) NOT NULL,
          query text NOT NULL,
          FOREIGN KEY (txid, txts, version) REFERENCES #{version_table} (txid, txts, version)
      );
      """,
      ##################
      """
      CREATE TABLE #{schema_table} (
          id int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          version varchar(255) NOT NULL,
          schema jsonb NOT NULL,
          migration_ddl text[] NOT NULL,
          created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP
      );
      """,
      ##################
      """
      CREATE UNIQUE INDEX electric_schema_version_idx ON #{schema_table} (version);
      """,
      ##################
      """
      CREATE PUBLICATION "#{publication_name}"; 
      """,
      Extension.add_table_to_publication_sql(ddl_table)
    ]
  end

  @impl true
  def down(_schema) do
    []
  end
end
