defmodule Electric.Postgres.Extension.Migrations.Migration_20230328113927 do
  alias Electric.Postgres.Extension

  @behaviour Extension.Migration
  # https://www.postgresql.org/docs/current/functions-info.html#FUNCTIONS-PG-SNAPSHOT
  # pg_current_xact_id() -> xid8
  # The internal transaction ID type .. xid8 ... [id] a 64-bit type xid8 that
  # does not wrap around during the life of an installation
  @txid_type "xid8"
  # use an int8 for the txts timestamp column because epgsql has very poor
  # support for timestamp columns :(
  @txts_type "int8"

  # @current_tx_id "pg_current_xact_id()"
  # @current_tx_ts "transaction_timestamp()"

  @impl true
  def version, do: 2023_03_28_11_39_27

  # def is_current_txid(prefix \\ ""),
  #   do: "#{prefix}txid = #{@current_tx_id} AND #{prefix}txts = #{@current_tx_ts}"

  @impl true
  def up(schema) do
    ddl_table = Extension.ddl_table()
    schema_table = Extension.schema_table()
    version_table = Extension.version_table()
    publication_name = Extension.publication_name()

    [
      """
      CREATE OR REPLACE FUNCTION #{schema}.current_xact_ts() RETURNS #{@txts_type} SECURITY DEFINER AS $function$
      BEGIN
         RETURN (extract(epoch from transaction_timestamp()) * 1000000)::#{@txts_type};
      END;
      $function$ LANGUAGE PLPGSQL STABLE STRICT PARALLEL SAFE;
      """,
      ##################
      """
      CREATE OR REPLACE FUNCTION #{schema}.current_xact_id() RETURNS #{@txid_type} SECURITY DEFINER AS $function$
      BEGIN
         RETURN pg_current_xact_id();
      END;
      -- PARALLEL UNSAFE because `pg_current_xact_id` is parallel unsafe
      $function$ LANGUAGE PLPGSQL STABLE STRICT PARALLEL UNSAFE;
      """,
      ##################
      """
      CREATE TABLE #{version_table} (
          txid #{@txid_type} DEFAULT #{schema}.current_xact_id() NOT NULL,
          txts #{@txts_type} DEFAULT #{schema}.current_xact_ts() NOT NULL,
          version text NOT NULL,
          inserted_at timestamp with time zone DEFAULT transaction_timestamp() NOT NULL,
          PRIMARY KEY (txid, txts),
          CONSTRAINT "migration_unique_version" UNIQUE (version)
      );
      """,
      ##################
      """
      CREATE TABLE #{ddl_table} (
          id int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          txid #{@txid_type} DEFAULT #{schema}.current_xact_id() NOT NULL,
          txts #{@txts_type} DEFAULT #{schema}.current_xact_ts() NOT NULL,
          query text NOT NULL,
          inserted_at timestamp with time zone DEFAULT transaction_timestamp() NOT NULL
      );
      """,
      ##################
      """
      CREATE TABLE #{schema_table} (
          id int8 NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          version varchar(255) NOT NULL,
          schema jsonb NOT NULL,
          migration_ddl text[] NOT NULL,
          created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP
      );
      """,
      ##################
      """
      CREATE UNIQUE INDEX electric_schema_version_idx ON #{schema_table} (version);
      """,
      ##################
      """
      CREATE OR REPLACE FUNCTION #{schema}.tx_has_assigned_version() RETURNS bool SECURITY DEFINER AS $function$
      DECLARE
        _txid #{@txid_type};
        _txts #{@txts_type};
      BEGIN
        SELECT txid, txts INTO _txid, _txts FROM #{schema}.current_transaction_id();
        RETURN EXISTS (SELECT version FROM #{version_table} WHERE txid = _txid AND txts = _txts);
      END;
      $function$ LANGUAGE PLPGSQL;
      """,
      ##################
      """
      CREATE OR REPLACE PROCEDURE #{schema}.assign_migration_version(_version text) SECURITY DEFINER AS $function$
      BEGIN
          INSERT INTO #{version_table} (version) VALUES (_version);
      END;
      $function$ LANGUAGE PLPGSQL;
      """,
      ##################
      """
      CREATE OR REPLACE PROCEDURE #{schema}.migration_version(_version text) SECURITY DEFINER AS $function$
      BEGIN
          IF NOT (SELECT #{schema}.tx_has_assigned_version()) THEN
            CALL #{schema}.assign_migration_version(_version);
          END IF;
      END;
      $function$ LANGUAGE PLPGSQL;
      """,
      ##################
      """
      CREATE OR REPLACE FUNCTION #{schema}.current_transaction_id(
          OUT txid #{@txid_type},
          OUT txts #{@txts_type}
      ) SECURITY DEFINER AS $function$
      BEGIN
          txid := (SELECT #{schema}.current_xact_id());
          txts := (SELECT #{schema}.current_xact_ts());
      END;
      $function$ LANGUAGE PLPGSQL;
      """,
      ##################
      # This function is overriden at Electric startup by a slightly modified defintion stored in
      # `functions/create_active_migrations.sql.eex`. We're only keep the old version here so that the migration keeps
      # working for new users.
      #
      # Once all function definitions are evaluated at Electric startup, as outlined in VAX-1016, we'll be able to
      # remove this legacy one.
      """
      CREATE OR REPLACE PROCEDURE #{schema}.capture_ddl(_query text DEFAULT NULL) SECURITY DEFINER AS
      $function$
      BEGIN
          IF _query IS NULL THEN
              _query := current_query();
          END IF;

          RAISE DEBUG 'capture migration: %', _query;

          INSERT INTO #{ddl_table} (query) VALUES (_query);
      END;
      $function$ LANGUAGE PLPGSQL;
      """,
      ##################
      """
      CREATE PUBLICATION "#{publication_name}";
      """,
      Extension.add_table_to_publication_sql(ddl_table)
    ]
  end

  @impl true
  def down(_schema) do
    []
  end
end
