CREATE OR REPLACE PROCEDURE <%= schema() %>.electrify(
    name1 text,
    name2 text DEFAULT NULL
) SECURITY DEFINER AS $function$
DECLARE
    _schema name;
    _table text;
    _oid regclass;
    _ddl_statements text[];
BEGIN
    SELECT schema_name, table_name, table_oid
        INTO _schema, _table, _oid
        FROM <%= schema() %>.__resolve_table_from_names(name1, name2);

    RAISE WARNING
        E'Electrification via procedure call is deprecated.'
        '\n\nPlease use the `ALTER %I.%I ENABLE ELECTRIC` syntax via the migrations proxy.'
        '\n\nSee https://electric-sql.com/docs/usage/data-modelling/migrations#migrations-proxy', _schema, _table;

    -- duplicate validations now run in elixir using a resolved schema
    CALL <%= schema() %>.__validate_table_schema(_oid);
    CALL <%= schema() %>.__validate_table_column_types(_oid);
    CALL <%= schema() %>.__validate_table_primary_keys(_oid);

    SELECT <%= schema() %>.generate_electrified_sql(_oid) INTO _ddl_statements;

    CALL <%=  schema()  %>.electrify_with_ddl(
        _schema,
        _table,
        VARIADIC _ddl_statements
    );
END;
$function$ LANGUAGE PLPGSQL;
