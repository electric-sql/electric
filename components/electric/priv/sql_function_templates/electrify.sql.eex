CREATE OR REPLACE PROCEDURE <%= schema() %>.electrify(
    name1 text,
    name2 text DEFAULT NULL
) SECURITY DEFINER AS $function$
DECLARE
    _schema name;
    _table text;
    _oid regclass;
    _create_sql text;
BEGIN
    SELECT
        schema_name, table_name, table_oid
    INTO
        _schema, _table, _oid
    FROM <%= schema() %>.__resolve_table_from_names(name1, name2);

    IF NOT EXISTS (SELECT pc.oid FROM pg_class pc WHERE pc.oid = _oid AND pc.relkind = 'r') THEN
        RAISE EXCEPTION '%I.%I is not an ordinary table', _schema, _table;
    END IF;

    IF NOT EXISTS (
        SELECT oid FROM <%= electrified_tracking_table() %> WHERE schema_name = _schema AND table_name = _table LIMIT 1
        ) THEN
        RAISE NOTICE 'Electrify table %I.%I', _schema, _table;

        CALL <%= schema() %>.__validate_table_schema(_oid);
        CALL <%= schema() %>.__validate_table_column_types(_oid);
        CALL <%= schema() %>.__validate_table_column_defaults(_oid);
        CALL <%= schema() %>.__validate_table_constraints(_oid);

        -- insert the required ddl into the migrations table
        SELECT <%= schema() %>.generate_electrified_sql(_oid) INTO _create_sql;

        RAISE DEBUG '%', _create_sql;

        CALL <%= schema() %>.capture_ddl(_create_sql);

        EXECUTE format('ALTER TABLE %I.%I REPLICA IDENTITY FULL;', _schema, _table);

        INSERT INTO <%= electrified_tracking_table() %>
            (schema_name, table_name, oid)
          VALUES
            (_schema, _table, _oid);

        EXECUTE format('<%= add_table_to_publication_sql("%I.%I") %>;', _schema, _table);

        -- We want to disable any possible hooks from `CREATE TABLE` statements
        PERFORM set_config('<%= schema() %>.is_in_event_trigger', 'true', true);
        PERFORM <%= schema() %>.ddlx_make_or_update_shadow_tables('CREATE TABLE', _schema, _oid);
        PERFORM set_config('<%= schema() %>.is_in_event_trigger', '', true);

        EXECUTE format(
            '<%= add_table_to_publication_sql("%I.%I")  %>;',
            '<%= schema() %>',
            ('shadow__' || _schema || '__' || _table)::name
        );
    ELSE
        -- rather than raising an error and aborting, let's make this
        -- procedure more idempotent and just ignore double electrification
        RAISE NOTICE 'table %.% is already electrified', _schema, _table;
    END IF;
END;
$function$ LANGUAGE PLPGSQL;
