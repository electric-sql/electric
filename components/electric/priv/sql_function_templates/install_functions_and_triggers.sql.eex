CREATE OR REPLACE FUNCTION <%= schema() %>.install_functions_and_triggers(schema_name TEXT, table_name TEXT, primary_key_list TEXT[], non_pk_column_list TEXT[])
    RETURNS VOID
    LANGUAGE PLPGSQL
    AS $function$
DECLARE
    shadow_table_name TEXT := 'shadow__' || schema_name || '__' || table_name;
    full_table_identifier TEXT := format('%I.%I', schema_name, table_name);
    generated_functions JSONB;
BEGIN
    -- Install function to be used in the triggers
    generated_functions := <%= schema() %>.install_conflict_resolution_functions(schema_name, table_name, primary_key_list, non_pk_column_list);

    -- Install actual triggers
    EXECUTE format($$
        CREATE OR REPLACE TRIGGER as_first__save_deleted_rows_to_tombstone_table
        AFTER DELETE ON %s
        FOR EACH ROW
        EXECUTE PROCEDURE <%= schema() %>.%I()
    $$, full_table_identifier, generated_functions->>'generate_tombstone_entry');
    EXECUTE format($$ ALTER TABLE %s ENABLE ALWAYS TRIGGER as_first__save_deleted_rows_to_tombstone_table $$, full_table_identifier);

    EXECUTE format($$
        CREATE OR REPLACE TRIGGER postgres_write__upsert_generate_shadow_rows
        BEFORE INSERT OR UPDATE ON %s
        FOR EACH ROW
        WHEN (<%= schema() %>.__session_replication_role() <> 'replica')
        EXECUTE PROCEDURE <%= schema() %>.%I();
    $$, full_table_identifier, generated_functions->>'create_shadow_row_from_upsert');

    EXECUTE format($$ ALTER TABLE %s ENABLE TRIGGER postgres_write__upsert_generate_shadow_rows $$, full_table_identifier);

    EXECUTE format($$
        CREATE OR REPLACE TRIGGER postgres_write__delete_generate_shadow_rows
        BEFORE DELETE ON %s
        FOR EACH ROW
        WHEN (<%= schema() %>.__session_replication_role() <> 'replica')
        EXECUTE PROCEDURE <%= schema() %>.%I();
    $$, full_table_identifier, generated_functions->>'update_shadow_row_from_delete');

    EXECUTE format($$ ALTER TABLE %s ENABLE TRIGGER postgres_write__delete_generate_shadow_rows $$, full_table_identifier);

    EXECUTE format($$ DROP TRIGGER IF EXISTS postgres_write__write_resolved_tags ON <%= schema() %>.%I $$, shadow_table_name);
    EXECUTE format($$
        CREATE CONSTRAINT TRIGGER postgres_write__write_resolved_tags
        AFTER UPDATE ON <%= schema() %>.%I
        DEFERRABLE INITIALLY DEFERRED
        FOR EACH ROW
        WHEN (<%= schema() %>.__session_replication_role() <> 'replica' AND NOT NEW._resolved)
        EXECUTE PROCEDURE <%= schema() %>.%I();
    $$, shadow_table_name, generated_functions->>'write_correct_max_tag');

    EXECUTE format($$ ALTER TABLE <%= schema() %>.%I ENABLE TRIGGER postgres_write__write_resolved_tags $$, shadow_table_name);

    EXECUTE format($$
        CREATE OR REPLACE TRIGGER satellite_write__upsert_rows
        BEFORE INSERT ON <%= schema() %>.%I
        FOR EACH ROW
        WHEN (<%= schema() %>.__session_replication_role() = 'replica' AND pg_trigger_depth() < 1 AND NEW._currently_reordering IS NULL)
        EXECUTE PROCEDURE <%= schema() %>.%I();
    $$, shadow_table_name, generated_functions->>'shadow_insert_to_upsert');

    EXECUTE format($$ ALTER TABLE <%= schema() %>.%I ENABLE ALWAYS TRIGGER satellite_write__upsert_rows $$, shadow_table_name);

    EXECUTE format($$
        CREATE OR REPLACE TRIGGER satellite_write__resolve_observed_tags
        BEFORE UPDATE ON <%= schema() %>.%I
        FOR EACH ROW
        WHEN (<%= schema() %>.__session_replication_role() = 'replica' AND NEW._currently_reordering IS NULL)
        EXECUTE PROCEDURE <%= schema() %>.%I();
    $$, shadow_table_name, generated_functions->>'resolve_observed_tags');

    EXECUTE format($$ ALTER TABLE <%= schema() %>.%I ENABLE ALWAYS TRIGGER satellite_write__resolve_observed_tags $$, shadow_table_name);

    EXECUTE format($$
        CREATE OR REPLACE TRIGGER satellite_write__save_operation_for_reordering
        BEFORE INSERT OR UPDATE ON %s
        FOR EACH ROW
        WHEN (<%= schema() %>.__session_replication_role() = 'replica' AND pg_trigger_depth() < 1)
        EXECUTE PROCEDURE <%= schema() %>.%I();
    $$, full_table_identifier, generated_functions->>'reorder_main_op');

    EXECUTE format($$ ALTER TABLE %s ENABLE ALWAYS TRIGGER satellite_write__save_operation_for_reordering $$, full_table_identifier);
END
$function$;
