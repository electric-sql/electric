-- Validate the type of each column of the table that's being electrified,
-- to check if it is supported by Electric.
--
-- This implementation mirrors the Electric.Postgres.Proxy.QueryAnalyser.Impl.check_column_type() function.
--
-- It is important that this implementation and the one in check_column_type() behave the same to
-- ensure consistent handling of columns both when a table is first electrified and when a new column is added to an
-- already electrified table.

<%
  valid_column_types =
    Electric.Postgres.supported_types()
    |> Enum.map(&"'#{&1}'")
    |> Enum.join(",")
%>

CREATE OR REPLACE PROCEDURE <%= schema() %>.__validate_table_column_types(table_oid regclass)
SECURITY DEFINER AS $function$
DECLARE
    _col_name text;
    _col_typname text;
    _col_typmod int;
    _col_type_pretty text;
    _enum_oid regtype;
    _invalid_enum_vals text[];
    _invalid_cols text[];
BEGIN
    FOR _col_name, _col_typname, _col_typmod, _col_type_pretty, _enum_oid IN
        SELECT
            attname,
            typname,
            atttypmod,
            format_type(atttypid, atttypmod),
            (CASE WHEN typtype = 'e' THEN atttypid END)
        FROM pg_attribute
        JOIN pg_type ON atttypid = pg_type.oid
        WHERE attrelid = table_oid AND attnum > 0 AND NOT attisdropped
        ORDER BY attnum
    LOOP
        IF _enum_oid IS NOT NULL THEN
            SELECT array_agg(format('%L', enumlabel) ORDER BY enumsortorder)
            INTO _invalid_enum_vals
            FROM pg_enum
            WHERE enumtypid = _enum_oid AND enumlabel !~* '^[a-z][a-z_0-9]*$';

            IF _invalid_enum_vals != '{}' THEN
                _invalid_cols =
                    array_append(_invalid_cols,
                                 format('%I %s (enum type %s contains unsupported values %s)',
                                        _col_name,
                                        _col_type_pretty,
                                        _col_type_pretty,
                                        array_to_string(_invalid_enum_vals, ', ')));
            END IF;
        ELSIF (
            _col_typname NOT IN (<%= valid_column_types %>)
            -- We only support unsized varchar type
            OR (
                'varchar' IN (<%= valid_column_types %>)
                AND _col_typname = 'varchar'
                AND _col_typmod <> -1
            )
        )
        THEN
            _invalid_cols = array_append(_invalid_cols, format('%I %s', _col_name, _col_type_pretty));
        END IF;
    END LOOP;

    IF _invalid_cols IS NOT NULL THEN
        RAISE EXCEPTION
            E'Cannot electrify % because some of its columns have types not supported by Electric:\n\n    %'
             '\n\nSee https://electric-sql.com/docs/usage/data-modelling/types#supported-data-types'
             '\nto learn more about data type support in Electric.',
            table_oid::regclass, array_to_string(_invalid_cols, E'\n    ');
    END IF;
END;
$function$ LANGUAGE PLPGSQL;
