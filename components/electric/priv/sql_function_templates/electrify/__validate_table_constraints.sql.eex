-- Check whether the table that's being electrified has a primary key and any other contraints.
-- Electrification is abort if there are any unsupported constraints: CHECK, UNIQUE, GENERATED, etc.
--
-- This implementation mirrors the Electric.Postgres.Proxy.QueryAnalyser.Impl.validate_column_constraint() function.
--
-- It is important that this implementation and the one in validate_column_constraint() behave the same to
-- ensure consistent handling of columns both when a table is first electrified and when a new column is added to an
-- already electrified table.

CREATE OR REPLACE PROCEDURE <%= schema() %>.__validate_table_constraints(table_oid regclass)
SECURITY DEFINER AS $function$
DECLARE
    _con_type char;
    _col_name text;
    _invalid_cols text[];
    _has_primary_key boolean := false;
BEGIN
    FOR _con_type, _col_name IN
        SELECT contype, attname
        FROM pg_constraint
        JOIN pg_attribute ON attrelid = conrelid AND attnum = ANY(conkey)
        WHERE conrelid = table_oid
        ORDER BY contype, attname
    LOOP
        IF _con_type = 'p' THEN
            _has_primary_key = true;
        ELSIF _con_type NOT IN ('p', 'f') THEN
            _invalid_cols = array_append(_invalid_cols, format('%I', _col_name));
        END IF;
    END LOOP;

    IF NOT _has_primary_key THEN
        RAISE EXCEPTION E'Cannot electrify % because it doesn''t have a PRIMARY KEY.', table_oid::regclass;
    END IF;

    IF _invalid_cols IS NOT NULL AND <%= schema() %>.__lookup_test_flag('__constraint_validation_enabled', true) THEN
        RAISE EXCEPTION E'Cannot electrify % because some of its columns have CHECK, UNIQUE, EXCLUDE or user-defined constraints which are not currently supported by Electric:\n  %',
                        table_oid::regclass, array_to_string(_invalid_cols, E'\n  ');
    END IF;
END;
$function$ LANGUAGE PLPGSQL;
