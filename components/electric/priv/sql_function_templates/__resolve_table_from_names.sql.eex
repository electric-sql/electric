CREATE OR REPLACE FUNCTION <%= schema() %>.__resolve_table_from_names(
    name1 text,
    name2 text,
    OUT schema_name name,
    OUT table_name name,
    OUT table_oid regclass
) SECURITY DEFINER AS $function$
DECLARE
    _ident text[];
BEGIN
    IF name1 IS NULL AND name2 IS NULL THEN
        RAISE EXCEPTION 'no valid table name given';
    ELSIF name2 IS NULL THEN
        -- handle table passed as 'schema.table'
        IF strpos(name1, '.') > 0 THEN
            _ident := parse_ident(name1);
            IF array_length(_ident, 1) = 1 THEN
                table_name := _ident[1];
                table_oid := (SELECT quote_ident(table_name)::regclass);
                schema_name := <%= schema() %>.__table_schema(table_oid);
            ELSIF array_length(_ident, 1) = 2 THEN
                schema_name := _ident[1];
                table_name := _ident[2];
                table_oid := (SELECT format('%I.%I', schema_name, table_name)::regclass);
            ELSE
                RAISE EXCEPTION 'invalid table name given %', name1;
            END IF;
        ELSE
            table_name := name1;
            table_oid := (SELECT quote_ident(table_name)::regclass);
            schema_name := <%= schema() %>.__table_schema(table_oid);
        END IF;
    ELSIF name1 IS NOT NULL AND name2 IS NOT NULL THEN
        table_name := name2;
        schema_name := name1;
        table_oid := (SELECT format('%I.%I', schema_name, table_name)::regclass);
    ELSE
        RAISE EXCEPTION 'no valid table name given';
    END IF;
END;
$function$ LANGUAGE PLPGSQL STABLE;
