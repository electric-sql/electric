[doc Verify handling of an Electric rolling deploy]

[include _macros.luxinc]

[global pg_container_name=rolling-deploy__pg]

###

## Start a new Postgres cluster
[invoke setup_pg "" ""]

## Start the first sync service.
[invoke setup_electric_shell_with_tenant "electric_1" "3000"]

[shell electric_1]
  ??[info] Acquiring lock from postgres with name electric_slot_integration
  ??[info] Lock acquired from postgres with name electric_slot_integration
  ??[info] Starting replication from postgres
  
# First service should be health and active
[shell orchestator]
  !curl -X GET http://localhost:3000/v1/health?database_id=integration_test_tenant
  ??{"status":"active"}

## Start the second sync service.
[invoke setup_electric_shell_with_tenant "electric_2" "3001"]

## Assert that the lock is not acquired and replication does not start
## in the second electric
[shell electric_2]
  -Lock acquired from postgres|Starting replication from postgres|$fail_pattern
  ??[info] Acquiring lock from postgres with name electric_slot_integration
  [sleep 2]


# Second service should be in waiting state, ready to take over
[shell orchestator]
  !curl -X GET http://localhost:3000/v1/health?database_id=integration_test_tenant
  ??{"status":"active"}
  !curl -X GET http://localhost:3001/v1/health?database_id=integration_test_tenant
  ??{"status":"waiting"}

## Terminate first electric
[shell electric_1]
  !System.halt()
  
  # Confirm Electric process exit.
  ??$PS1

## Lock should now be acquired and replication starting
[shell electric_2]
  -$fail_pattern
  ??[info] Lock acquired from postgres with name electric_slot_integration
  ??[info] Starting replication from postgres

# Second service is now healthy and active
[shell orchestator]
  !curl -X GET http://localhost:3001/v1/health?database_id=integration_test_tenant
  ??{"status":"active"}

[cleanup]
  [invoke teardown]
