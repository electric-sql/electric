[global PS1=SH-PROMPT:]
[global fail_pattern=(?i)error|fatal|no such]

[global pg_container_name=]
[global pg_host_port=54331]
[global database_url=postgresql://postgres:password@localhost:$pg_host_port/postgres?sslmode=disable]

[macro setup_pg initdb_args config_opts]
  [shell pg]
    -$fail_pattern
  
    !docker run \
      --name $pg_container_name \
      -e POSTGRES_DB=electric \
      -e POSTGRES_USER=postgres \
      -e POSTGRES_PASSWORD=password \
      -e POSTGRES_INITDB_ARGS=${initdb_args} \
      -p $pg_host_port:5432 \
      postgres:14-alpine \
        -c wal_level=logical ${config_opts}

    ??PostgreSQL init process complete; ready for start up.
    ??database system is ready to accept connections
  
    # Reset the failure pattern to avoid false failures when Electric tries to create an already
    # existing publication or replication slot.
    -
[endmacro]

[macro stop_pg]
  [shell pg_lifecycle]
    # This timeout is needed until https://github.com/electric-sql/electric/issues/1632 is fixed.
    !docker stop -t 1 $pg_container_name
[endmacro]

[macro resume_pg]
  [shell pg_lifecycle]
    !docker start $pg_container_name

  [shell pg]
    !docker attach $pg_container_name
    ??database system is ready to accept connections
[endmacro]

[macro start_psql]
  [shell psql]
    !docker exec -u postgres -it $pg_container_name psql
[endmacro]

[macro seed_pg]
  [shell psql]
    !docker exec -u postgres -it $pg_container_name psql
  
    """!
    CREATE TABLE items2 (
      id UUID PRIMARY KEY,
      val1 TEXT,
      val2 TEXT
    );
    """
    ??CREATE TABLE
  
    """!
    INSERT INTO
      items2 (id, val1, val2)
    SELECT
      gen_random_uuid(),
      '#' || generate_series || ' test val1 ' || repeat('012345679abcdef', 4096),
      '#' || generate_series || ' test val2 ' || repeat('012345679abcdef', 4096)
    FROM
      generate_series(1, 2048);
    """
    ??INSERT 0 2048
[endmacro]

[macro setup_electric]
  [invoke setup_electric_with_env ""]
[endmacro]

[macro setup_electric_with_env env]
  [invoke setup_electric_shell "electric" "3000" $env]
[endmacro]

[macro setup_electric_shell shell_name port env]
  [shell $shell_name]
    -$fail_pattern
  
    !DATABASE_URL=$database_url PORT=$port $env ../scripts/electric_dev.sh
[endmacro]

[macro teardown]
  -$fail_pattern
  !docker rm -f -v $pg_container_name
  ?$PS1
  !../scripts/clean_up.sh
  ?$PS1
[endmacro]
