[global PS1=SH-PROMPT:]
[global fail_pattern=(?i)error|fatal|no such]

[global pg_container_name=]
[global pg_host_port=54331]
[global database_url=postgresql://postgres:password@localhost:$pg_host_port/postgres?sslmode=disable]

[macro setup_pg_with_name shell_name initdb_args config_opts]
  [shell $shell_name]
    -$fail_pattern
  
    !docker run \
      --name $pg_container_name \
      -e POSTGRES_DB=electric \
      -e POSTGRES_USER=postgres \
      -e POSTGRES_PASSWORD=password \
      -e POSTGRES_INITDB_ARGS=${initdb_args} \
      -p $pg_host_port:5432 \
      postgres:14-alpine \
        -c wal_level=logical ${config_opts}

    ??PostgreSQL init process complete; ready for start up.
    ??database system is ready to accept connections
  
    # Reset the failure pattern to avoid false failures when Electric tries to create an already
    # existing publication or replication slot.
    -
[endmacro]

[macro setup_pg initdb_args config_opts]
  [invoke setup_pg_with_name "pg" $initdb_args $config_opts]
[endmacro]

[macro stop_pg]
  [shell pg_lifecycle]
    # This timeout is needed until https://github.com/electric-sql/electric/issues/1632 is fixed.
    !docker stop -t 1 $pg_container_name
    ?$PS1

  [shell pg]
    ??database system is shut down
    [sleep 1]
[endmacro]

[macro resume_pg]
  [shell pg]
    !docker start --attach $pg_container_name
    ??database system is ready to accept connections
[endmacro]

[macro start_psql_shell shell_name pg_container_name]
  [shell $shell_name]
    !docker exec -u postgres -it $pg_container_name psql
[endmacro]

[macro start_psql]
  [invoke start_psql_shell psql $pg_container_name]
[endmacro]

[macro seed_pg]
  [shell psql]
    !docker exec -u postgres -it $pg_container_name psql
  
    """!
    CREATE TABLE items2 (
      id UUID PRIMARY KEY,
      val1 TEXT,
      val2 TEXT
    );
    """
    ??CREATE TABLE
  
    """!
    INSERT INTO
      items2 (id, val1, val2)
    SELECT
      gen_random_uuid(),
      '#' || generate_series || ' test val1 ' || repeat('012345679abcdef', 4096),
      '#' || generate_series || ' test val2 ' || repeat('012345679abcdef', 4096)
    FROM
      generate_series(1, 2048);
    """
    ??INSERT 0 2048
[endmacro]

[macro setup_electric]
  [invoke setup_electric_with_env "DATABASE_URL=$database_url"]
[endmacro]

[macro setup_multi_tenant_electric]
  [invoke setup_electric_with_env ""]
[endmacro]

[macro setup_electric_with_env env]
  [invoke setup_electric_shell "electric" "3000" $env]
[endmacro]

[macro setup_electric_with_env_and_tenant env]
  [invoke setup_electric_with_env "DATABASE_URL=$database_url $env"]
[endmacro]

[macro setup_electric_shell shell_name port env]
  [shell $shell_name]
    -$fail_pattern
  
    !ELECTRIC_PORT=$port $env ../scripts/electric_dev.sh
[endmacro]

[macro setup_electric_shell_with_tenant shell_name port]
  [invoke setup_electric_shell $shell_name $port "DATABASE_URL=$database_url"]
[endmacro]

[macro add_tenant tenant_id electric_port]
  [shell $tenant_id]
    !curl -X POST http://localhost:$electric_port/v1/admin/database \
      -H "Content-Type: application/json" \
      -d "{\"database_id\":\"$tenant_id\",\"database_url\":\"$database_url\"}"
    ??"$tenant_id"
[endmacro]

[macro check_tenant_status tenant_id expected_status electric_port]
  [shell $tenant_id]
    [invoke wait-for "curl -X GET http://localhost:$electric_port/v1/health?database_id=$tenant_id" "\{\"status\":\"$expected_status\"\}" 10 $PS1]
[endmacro]

[macro teardown_container container_name]
  -$fail_pattern
  !docker rm -f -v $container_name
  ?$PS1
[endmacro]

[macro teardown]
  [invoke teardown_container $pg_container_name]
  !../scripts/clean_up.sh
  ?$PS1
[endmacro]

[macro wait-for command match max_time prompt]
    [loop i 1..$max_time]
        @$match
        !$command
        ??$command
        ?$prompt
        [sleep 1]
    [endloop]
    # The last prompt won't match since the loop pattern will
    # match before it, so match it here instead.
    ?$prompt

    # Sync up after the loop.
    !$command
    ??$command
    ?$prompt
[endmacro]