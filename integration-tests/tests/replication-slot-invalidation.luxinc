[global PS1=SH-PROMPT:]
[global fail_pattern=(?i)error|fatal|no such]

[global pg_container_name=]
[global database_url=]

[macro setup_pg initdb_args config_opts]
  [shell pg]
    -$fail_pattern
  
    !docker run --rm \
      --name $pg_container_name \
      -e POSTGRES_DB=electric \
      -e POSTGRES_USER=postgres \
      -e POSTGRES_PASSWORD=password \
      -e POSTGRES_INITDB_ARGS=${initdb_args} \
      -p 5432 \
      postgres:14-alpine \
        -c wal_level=logical ${config_opts}
  
    ??database system is ready to accept connections
  
    # Reset the failure pattern to avoid false failures when Electric tries to create an already
    # existing publication or replication slot.
    -

  [shell get_container_port]
    !docker inspect $pg_container_name --format '{{json .NetworkSettings.Ports}}'
    ?"HostIp":"0.0.0.0","HostPort":"(\d+)"
    [local port=$1]
    [global database_url=postgresql://postgres:password@localhost:$port/postgres?sslmode=disable]
[endmacro]

[macro seed_pg]
  [shell psql]
    !docker exec -u postgres -it $pg_container_name psql
  
    """!
    CREATE TABLE items2 (
      id UUID PRIMARY KEY,
      val1 TEXT,
      val2 TEXT
    );
    """
    ??CREATE TABLE
  
    """!
    INSERT INTO
      items2 (id, val1, val2)
    SELECT
      gen_random_uuid(),
      '#' || generate_series || ' test val1 ' || repeat('012345679abcdef', 4096),
      '#' || generate_series || ' test val2 ' || repeat('012345679abcdef', 4096)
    FROM
      generate_series(1, 2048);
    """
    ??INSERT 0 2048
[endmacro]

[macro setup_electric]
  [shell electric]
    -$fail_pattern
  
    !DATABASE_URL=$database_url ../electric_dev.sh
[endmacro]

[macro teardown]
  -$fail_pattern

  !docker rm -f -v $pg_container_name
[endmacro]
