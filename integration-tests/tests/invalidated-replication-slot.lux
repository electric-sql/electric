[doc Verify handling of invalidated replication slot while Electric is running]

[include _macros.luxinc]

[global pg_container_name=replication-slot-invalidated-while-running__pg]

[my invalidated_slot_error=
  """
  ** (Postgrex.Error) ERROR 55000 (object_not_in_prerequisite_state) cannot read from logical replication slot "electric_slot_integration"

  This slot has been invalidated because it exceeded the maximum reserved size.
  """]

[my stack_id="single_stack"]

###

[macro capture_stack_supervisor_pid]
  ?pid=(<\d+\.\d+\.\d+>) \[debug\] The single StackSupervisor is initializing...
  # All interactive commands and matches are performed within a single IEx session,
  # so we can assign local variables here which is less of a hassle than using lux variables.
  !stack_supervisor_pid = :erlang.list_to_pid(~c"$1")
  !stack_supervisor_mon = Process.monitor(stack_supervisor_pid)
[endmacro]

[macro verify_connection_and_stack_supervisors_shutdown stack_id invalidated_slot_error]
  ??$invalidated_slot_error
  ??[error] Stopping connection supervisor with stack_id=$stack_id due to an unrecoverable error

  !receive do \
     {:DOWN, ^stack_supervisor_mon, :process, ^stack_supervisor_pid, _} -> IO.puts "stack supervisor is down" \
   end
  ??stack supervisor is down

  !IO.puts("Stack supervisor pid: #{inspect Process.whereis(Electric.StackSupervisor)}")
  ??Stack supervisor pid: nil
[endmacro]

###

## Start a new Postgres cluster configured for easy replication slot invalidation.
[invoke setup_pg \
  "--wal-segsize=1" \
  "-c max_slot_wal_keep_size=1MB -c max_wal_size=2MB"]

## Start the sync service.
[invoke setup_electric]

[shell electric]
  [invoke capture_stack_supervisor_pid]

  ??[info] Starting replication from postgres

  # Verify that the stack supervisor is registered using regular process registration. If we
  # change this at any point, the line below will catch it and we'll be able to correct the
  # check further down that verifies that the stack supervisor is no longer running.
  !IO.puts("Stack supervisor pid: #{inspect Process.whereis(Electric.StackSupervisor)}")
  ??Stack supervisor pid: #PID<

## Seed the database with enough data to exceed max_wal_size and force a checkpoint that
## will invalidate the replication slot.
[invoke seed_pg]

## Confirm slot invalidation in Postgres.
[shell pg]
  ?invalidating slot "electric_slot_integration" because its restart_lsn [\d\w]+/[\d\w]+ exceeds max_slot_wal_keep_size

## Observe the fatal connection error.
[shell electric]
  # Reset the failure pattern because we'll be matching on an error.
  -

  [invoke verify_connection_and_stack_supervisors_shutdown $stack_id $invalidated_slot_error]

  # Restart the OTP application to verify that the supervisors shut down again due to the invalidated slot.
  !:ok = Application.stop(:electric)
  !:ok = Application.start(:electric)

  [invoke capture_stack_supervisor_pid]

  ??[info] Starting replication from postgres

  [invoke verify_connection_and_stack_supervisors_shutdown $stack_id $invalidated_slot_error]

[cleanup]
  [invoke teardown]
