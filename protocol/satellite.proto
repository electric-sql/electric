// This file defines protobuf protocol for Satellite <> Electric replication
// Messages are sent over the wire in the following format:
//
// Size:32, MsgType:8, Msg/binary
//
// In this document there is a notation of the Client/Server and
// Producer/Consumer which are used to annotate messages.
//
// Server is expected to be one of the Electric instances, while Client is a
// client application that talks to Electric via Satellite library, or any other
// enitty that implements this protocol.
//
// Producer and Consumer are the corresponding roles Client and Server play in
// replication process. Consumer requests replication from the Producer, and
// periodically answer Ping requests form the Prodicer to acknowledge
// successful replication. Consumer may also send such Ping requests, if the
// bidirectional replication is enabled. If one of the parties is not involved
// in the replication lsn field may be left empty.
syntax = "proto3";

// NOTE: Part after Electric.Satellite is used as a version of the protocol
// itseld where the format vMAJOR.MINOR is treated in the following way:
// MAJOR version when incompatible API changes are introduced
// MINOR version when functionality or bugfix in a backwards compatible manner
// are introduced.
package Electric.Satellite.v1_2;

// Ping request. Can be send by any party
message SatPingReq{
}

// Ping response.
message SatPingResp{
    // If LSN is present, it conveys to producer the latest LSN position that
    // was applied on the consumer side. If there is no active replication
    // ongoing the field should be left 0
    optional bytes lsn = 1;
}

enum SatAuthHeader {
    // protobuff required to have this by default
    UNSPECIFIED = 0;
    // required header
    // protobuf protocol version, this version is picked from
    // the package statement of this protobuf file, for example "Electric.Satellite.v10_13"
    PROTO_VERSION = 1;

    // required header
    // last schema version applied on the client. Is prepended with the hash
    // algorithm type, for example: "sha256:71c9f..."
    SCHEMA_VERSION = 2;
}

message SatAuthHeaderPair {
    SatAuthHeader key = 1;
    string value = 2;
}

// (Client) Auth request
//
// Client request is the first request that the client should send before
// executing any other request
message SatAuthReq {

    // Identity of the Satellite application. Is expected to be something like
    // UUID. Required field
    string id = 1;
    // Authentication token, auth method specific, required
    string token = 2;
    // Headers, required
    repeated SatAuthHeaderPair headers = 3;
}

// (Server) Auth response
message SatAuthResp {
    // Identity of the Server
    string id = 1;
    // Headers optional
    repeated SatAuthHeaderPair headers = 3;
}

// General purpose error message, that could be sent to any request from any
// sides. FIXME: We might want to separate that into Client/Server parts
message SatErrorResp {
    enum ErrorCode {
        INTERNAL = 0;
        AUTH_REQUIRED = 1;
        AUTH_FAILED = 2;
        REPLICATION_FAILED = 3;
        INVALID_REQUEST = 4;
        PROTO_VSN_MISSMATCH = 5;
        SCHEMA_VSN_MISSMATCH = 6;
    }

    ErrorCode error_type = 1;
}

// (Consumer) Starts replication stream from producer to consumer
message SatInStartReplicationReq {
    enum Option {
        NONE = 0;
        // Flag that indicates to Producer, to start replication from the latest
        // position that have been acknowledged by this Consumer. In such a case
        // provided lsn will be ignored
        LAST_ACKNOWLEDGED = 1;
        // In sync mode consumer of the stream is expected to send SatPingResp
        // message for every committed batch of SatOpLog messages
        SYNC_MODE = 2;
        // Asks receiver to start replication from the first transaction in the log
        // without necessity to know about the actual internal format of the LSN
        FIRST_LSN = 3;
        // Asks receiver to start replication from the last position in the log,
        // whatever this position is. Used for tests only.
        LAST_LSN = 4;
    }
    // LSN position of the log on the producer side
    bytes lsn = 1;
    repeated Option options = 2;
    // Amount of message after which SatPingResp message is expected to be
    // delivered when SYNC_MODE is used
    int32 sync_batch_size = 3;
}

// (Producer) Acknowledgement that replication have been started
message SatInStartReplicationResp {
}


// (Consumer) Request to stop replication
message SatInStopReplicationReq {

}

// (Producer) Acknowledgement that repliation have been stopped
message SatInStopReplicationResp {

}

message SatRelationColumn {
    string name = 1;
    string type = 2;
}

message SatRelation {
    enum RelationType {
        TABLE = 0;
        INDEX = 1;
        VIEW = 2;
        TRIGGER = 3;
    }

    string schema_name = 1;
    RelationType table_type = 2;
    string table_name = 3;
    // Volatile identity defined at the start of the replication protocol may or
    // may not be persisted is used in SatTransOp operations, to indicate
    // relation the operation is working on.
    uint32 relation_id = 4;
    repeated SatRelationColumn columns = 5;
}

// Time granularity.
// -----------------
// commit timestamps have microseconds granularity

// (Producer) Type defines replication messages, that flow from Producer once
// the replication is established. Message contains operations log. Operations
// should go in the LSN order. Begin and Commit operations corresponds to
// transaction boundaries.
// Transactions are guranteed not to be mixed, and will follow one by one.
message SatOpLog {
    repeated SatTransOp ops = 1;
}

// (Producer) Single operation, should be only send as part of the SatOplog
// message
message SatTransOp {
    oneof op {
        SatOpBegin  begin = 1;
        SatOpCommit commit = 2;
        SatOpUpdate update = 3;
        SatOpInsert insert = 4;
        SatOpDelete delete = 5;
        SatOpMigrate migrate = 6;
    }
}

// (Producer) Replication message that indicates transaction boundaries
// should be only send as payload in the SatTransOp message
message SatOpBegin {
    uint64 commit_timestamp = 1;
    string trans_id = 2;
    // Lsn position that points to first data segment of transaction in the
    // WAL
    bytes lsn = 3;
    // Globally unique id of the source that transaction originated from. For
    // data coming from Satellite this field is ignored. For data coming from
    // Electric this field can be used to deduce if the incoming transaction
    // originated on this Satellite instance or not.
    optional string origin = 4;
    // does this transaction contain ddl statements?
    bool is_migration = 5;
}

// (Producer) Replication message that indicates transaction boundaries
// should be only send as payload in the SatTransOp message
message SatOpCommit {
    uint64 commit_timestamp = 1;
    string trans_id = 2;
    bytes lsn = 3;
}

// (Producer) Data manipulation message, that only should be part of the
// SatTransOp message
message SatOpInsert {
    uint32 relation_id = 1;
    SatOpRow row_data = 2;
    // dependency information
    repeated string tags = 3;

}

// (Producer) Data manipulation message, that only should be part of the
// SatTransOp message
message SatOpUpdate {
    uint32 relation_id = 1;
    SatOpRow row_data = 2;
    SatOpRow old_row_data = 3;
    // dependency information
    repeated string tags = 4;
}

// (Producer) Data manipulation message, that only should be part of the
// SatTransOp message
message SatOpDelete {
    uint32 relation_id = 1;
    SatOpRow old_row_data = 2;
    // dependency information
    repeated string tags = 3;

}

// Message is sent when server is migrated while client is still connected It's
// up to the client to immediately perform a migration or stop replication
// stream if it's ongoing.
message SatMigrationNotification {
    // all fields are required
    string old_schema_version = 1;
    string old_schema_hash = 2;
    string new_schema_version = 3;
    string new_schema_hash = 4;
}

// Dependency information for row data.
// ------------------------------------
//
// Tags in a row is a set of strings, where each tag is textual representation
// of conacatenation of `origin` and `commit_timestamp`, that can be obtained
// from SatOpBegin message.
// Format: origin@commit_timestamp
// Example: fcb57d30-95ce-4d75-b295-c08c7a1e75d8@1674210220785123

// Message that corresponds to the single row.
message SatOpRow {
    bytes nulls_bitmask = 1;
    // values may contain binaries with size 0 for NULLs and empty values
    // check nulls_bitmask to differentiate between the two
    repeated bytes values = 2;
}

// A migration message, originating in Postgres, captured via event triggers,
// propated to electric, converted from postgres to the equivalent sqlite
// statement and inserted into the replication stream
//
// Each migration message includes the sql strings to execute on the satellite
// client as well as metadata information about the resulting structure of the
// changed tables.
message SatOpMigrate {
    enum Type {
        CREATE_TABLE = 0;
        CREATE_INDEX = 1;
        ALTER_ADD_COLUMN = 6;
    }
    message Stmt {
        Type type = 1;
        string sql = 2;
    }
    message PgColumnType {
        // the pg type name, e.g. int4, char
        string name = 1;
        // array dimensions, or [] for scalar types
        // e.g. for a column declared as int4[][3], size = [-1, 3]
        repeated int32 array = 2;
        // any size information, e.g. for varchar(SIZE) or [] for no size
        repeated int32 size = 3;
    }
    message Column {
        string name = 1;
        string sqlite_type = 2;
        PgColumnType pg_type = 3;
    }
    message ForeignKey {
        // the columns in the child table that point to the parent
        repeated string fk_cols = 1;
        // the parent table
        string pk_table = 2;
        // the cols in the parent table
        repeated string pk_cols = 3;
    }
    message Table {
        string name = 1;
        repeated Column columns = 2;
        repeated ForeignKey fks = 3;
        repeated string pks = 4;
    }
    // the migration version as specified by the developer and put into
    // the postgresql migration as an electric function call
    string version = 1;
    // a list of sql ddl statements to apply, converted from the pg originals
    // The migration machinery converts an `ALTER TABLE action1, action2, action3;` 
    // query into a set of 3: `ALTER TABLE action1; ALTER TABLE action2,` etc
    // so we need to support 1+ statements for every migration event.
    repeated Stmt stmts = 2;
    // The resulting table definition after applying these migrations
    // (a DDL statement can only affect one table at a time).
    Table table = 3;
}
