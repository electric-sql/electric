export default [
  {
    "statements": [
      "CREATE TABLE items (\n    id text NOT NULL,\n    content text NOT NULL,\n    content_text_null text,\n    content_text_null_default text,\n    intvalue_null integer,\n    intvalue_null_default integer,\n    CONSTRAINT items_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE other_items (\n    id text NOT NULL,\n    content text NOT NULL,\n    item_id text,\n    CONSTRAINT other_items_pkey PRIMARY KEY (id),\n    CONSTRAINT other_items_item_id_fkey FOREIGN KEY (item_id) REFERENCES items(id)\n);\n\n\n",
      "CREATE TABLE timestamps (\n    id text NOT NULL,\n    created_at timestamp without time zone NOT NULL,\n    updated_at timestamp with time zone NOT NULL,\n    CONSTRAINT timestamps_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE datetimes (\n    id text NOT NULL,\n    d date NOT NULL,\n    t time without time zone NOT NULL,\n    CONSTRAINT datetimes_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE bools (\n    id text NOT NULL,\n    b boolean,\n    CONSTRAINT bools_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE uuids (\n    id uuid NOT NULL,\n    CONSTRAINT uuids_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE ints (\n    id text NOT NULL,\n    i2 smallint,\n    i4 integer,\n    i8 bigint,\n    CONSTRAINT ints_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE floats (\n    id text NOT NULL,\n    f4 real,\n    f8 double precision,\n    CONSTRAINT floats_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE jsons (\n    id text NOT NULL,\n    jsb jsonb,\n    CONSTRAINT jsons_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TYPE \"Color\" AS ENUM (\n 'RED',\n 'GREEN',\n 'BLUE'\n);\n\n\n",
      "CREATE TABLE enums (\n    id text NOT NULL,\n    c \"Color\",\n    CONSTRAINT enums_pkey PRIMARY KEY (id)\n);\n\n\n",
      "CREATE TABLE blobs (\n    id text NOT NULL,\n    blob bytea,\n    CONSTRAINT blobs_pkey PRIMARY KEY (id)\n);\n\n\n",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'items', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_items_primarykey ON \"public\".\"items\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_items_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_items_primarykey\n  BEFORE UPDATE ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_items_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_items_into_oplog ON \"public\".\"items\";",
      "    CREATE OR REPLACE FUNCTION insert_public_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'items',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('content', new.\"content\", 'content_text_null', new.\"content_text_null\", 'content_text_null_default', new.\"content_text_null_default\", 'id', new.\"id\", 'intvalue_null', new.\"intvalue_null\", 'intvalue_null_default', new.\"intvalue_null_default\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_items_into_oplog\n  AFTER INSERT ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_items_into_oplog ON \"public\".\"items\";",
      "    CREATE OR REPLACE FUNCTION update_public_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'items',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('content', new.\"content\", 'content_text_null', new.\"content_text_null\", 'content_text_null_default', new.\"content_text_null_default\", 'id', new.\"id\", 'intvalue_null', new.\"intvalue_null\", 'intvalue_null_default', new.\"intvalue_null_default\"),\n            jsonb_build_object('content', old.\"content\", 'content_text_null', old.\"content_text_null\", 'content_text_null_default', old.\"content_text_null_default\", 'id', old.\"id\", 'intvalue_null', old.\"intvalue_null\", 'intvalue_null_default', old.\"intvalue_null_default\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_items_into_oplog\n  AFTER UPDATE ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_items_into_oplog ON \"public\".\"items\";",
      "    CREATE OR REPLACE FUNCTION delete_public_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'items',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('content', old.\"content\", 'content_text_null', old.\"content_text_null\", 'content_text_null_default', old.\"content_text_null_default\", 'id', old.\"id\", 'intvalue_null', old.\"intvalue_null\", 'intvalue_null_default', old.\"intvalue_null_default\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_items_into_oplog\n  AFTER DELETE ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_items_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'other_items', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_other_items_primarykey ON \"public\".\"other_items\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_other_items_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_other_items_primarykey\n  BEFORE UPDATE ON \"public\".\"other_items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_other_items_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_other_items_into_oplog ON \"public\".\"other_items\";",
      "    CREATE OR REPLACE FUNCTION insert_public_other_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'other_items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'other_items',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('content', new.\"content\", 'id', new.\"id\", 'item_id', new.\"item_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_other_items_into_oplog\n  AFTER INSERT ON \"public\".\"other_items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_other_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_other_items_into_oplog ON \"public\".\"other_items\";",
      "    CREATE OR REPLACE FUNCTION update_public_other_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'other_items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'other_items',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('content', new.\"content\", 'id', new.\"id\", 'item_id', new.\"item_id\"),\n            jsonb_build_object('content', old.\"content\", 'id', old.\"id\", 'item_id', old.\"item_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_other_items_into_oplog\n  AFTER UPDATE ON \"public\".\"other_items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_other_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_other_items_into_oplog ON \"public\".\"other_items\";",
      "    CREATE OR REPLACE FUNCTION delete_public_other_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'other_items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'other_items',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('content', old.\"content\", 'id', old.\"id\", 'item_id', old.\"item_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_other_items_into_oplog\n  AFTER DELETE ON \"public\".\"other_items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_other_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_other_items_item_id_into_oplog ON \"public\".\"other_items\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_other_items_item_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'other_items';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'items',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"items\"\n          WHERE \"id\" = NEW.\"item_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_other_items_item_id_into_oplog\n  AFTER INSERT ON \"public\".\"other_items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_other_items_item_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_other_items_item_id_into_oplog ON \"public\".\"other_items\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_other_items_item_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'other_items';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'items',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"items\"\n          WHERE \"id\" = NEW.\"item_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_other_items_item_id_into_oplog\n  AFTER UPDATE ON \"public\".\"other_items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_other_items_item_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'timestamps', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_timestamps_primarykey ON \"public\".\"timestamps\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_timestamps_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_timestamps_primarykey\n  BEFORE UPDATE ON \"public\".\"timestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_timestamps_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_timestamps_into_oplog ON \"public\".\"timestamps\";",
      "    CREATE OR REPLACE FUNCTION insert_public_timestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'timestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'timestamps',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_timestamps_into_oplog\n  AFTER INSERT ON \"public\".\"timestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_timestamps_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_timestamps_into_oplog ON \"public\".\"timestamps\";",
      "    CREATE OR REPLACE FUNCTION update_public_timestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'timestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'timestamps',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"),\n            jsonb_build_object('created_at', old.\"created_at\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_timestamps_into_oplog\n  AFTER UPDATE ON \"public\".\"timestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_timestamps_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_timestamps_into_oplog ON \"public\".\"timestamps\";",
      "    CREATE OR REPLACE FUNCTION delete_public_timestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'timestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'timestamps',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('created_at', old.\"created_at\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_timestamps_into_oplog\n  AFTER DELETE ON \"public\".\"timestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_timestamps_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'datetimes', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_datetimes_primarykey ON \"public\".\"datetimes\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_datetimes_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_datetimes_primarykey\n  BEFORE UPDATE ON \"public\".\"datetimes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_datetimes_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_datetimes_into_oplog ON \"public\".\"datetimes\";",
      "    CREATE OR REPLACE FUNCTION insert_public_datetimes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'datetimes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'datetimes',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('d', new.\"d\", 'id', new.\"id\", 't', new.\"t\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_datetimes_into_oplog\n  AFTER INSERT ON \"public\".\"datetimes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_datetimes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_datetimes_into_oplog ON \"public\".\"datetimes\";",
      "    CREATE OR REPLACE FUNCTION update_public_datetimes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'datetimes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'datetimes',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('d', new.\"d\", 'id', new.\"id\", 't', new.\"t\"),\n            jsonb_build_object('d', old.\"d\", 'id', old.\"id\", 't', old.\"t\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_datetimes_into_oplog\n  AFTER UPDATE ON \"public\".\"datetimes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_datetimes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_datetimes_into_oplog ON \"public\".\"datetimes\";",
      "    CREATE OR REPLACE FUNCTION delete_public_datetimes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'datetimes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'datetimes',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('d', old.\"d\", 'id', old.\"id\", 't', old.\"t\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_datetimes_into_oplog\n  AFTER DELETE ON \"public\".\"datetimes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_datetimes_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'bools', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_bools_primarykey ON \"public\".\"bools\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_bools_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_bools_primarykey\n  BEFORE UPDATE ON \"public\".\"bools\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_bools_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_bools_into_oplog ON \"public\".\"bools\";",
      "    CREATE OR REPLACE FUNCTION insert_public_bools_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'bools';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'bools',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('b', new.\"b\", 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_bools_into_oplog\n  AFTER INSERT ON \"public\".\"bools\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_bools_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_bools_into_oplog ON \"public\".\"bools\";",
      "    CREATE OR REPLACE FUNCTION update_public_bools_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'bools';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'bools',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('b', new.\"b\", 'id', new.\"id\"),\n            jsonb_build_object('b', old.\"b\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_bools_into_oplog\n  AFTER UPDATE ON \"public\".\"bools\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_bools_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_bools_into_oplog ON \"public\".\"bools\";",
      "    CREATE OR REPLACE FUNCTION delete_public_bools_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'bools';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'bools',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('b', old.\"b\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_bools_into_oplog\n  AFTER DELETE ON \"public\".\"bools\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_bools_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'uuids', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_uuids_primarykey ON \"public\".\"uuids\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_uuids_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_uuids_primarykey\n  BEFORE UPDATE ON \"public\".\"uuids\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_uuids_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_uuids_into_oplog ON \"public\".\"uuids\";",
      "    CREATE OR REPLACE FUNCTION insert_public_uuids_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'uuids';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'uuids',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_uuids_into_oplog\n  AFTER INSERT ON \"public\".\"uuids\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_uuids_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_uuids_into_oplog ON \"public\".\"uuids\";",
      "    CREATE OR REPLACE FUNCTION update_public_uuids_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'uuids';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'uuids',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\"),\n            jsonb_build_object('id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_uuids_into_oplog\n  AFTER UPDATE ON \"public\".\"uuids\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_uuids_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_uuids_into_oplog ON \"public\".\"uuids\";",
      "    CREATE OR REPLACE FUNCTION delete_public_uuids_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'uuids';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'uuids',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_uuids_into_oplog\n  AFTER DELETE ON \"public\".\"uuids\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_uuids_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'ints', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_ints_primarykey ON \"public\".\"ints\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_ints_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_ints_primarykey\n  BEFORE UPDATE ON \"public\".\"ints\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_ints_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_ints_into_oplog ON \"public\".\"ints\";",
      "    CREATE OR REPLACE FUNCTION insert_public_ints_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ints';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ints',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('i2', new.\"i2\", 'i4', new.\"i4\", 'i8', cast(new.\"i8\" as TEXT), 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_ints_into_oplog\n  AFTER INSERT ON \"public\".\"ints\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_ints_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_ints_into_oplog ON \"public\".\"ints\";",
      "    CREATE OR REPLACE FUNCTION update_public_ints_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ints';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ints',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('i2', new.\"i2\", 'i4', new.\"i4\", 'i8', cast(new.\"i8\" as TEXT), 'id', new.\"id\"),\n            jsonb_build_object('i2', old.\"i2\", 'i4', old.\"i4\", 'i8', cast(old.\"i8\" as TEXT), 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_ints_into_oplog\n  AFTER UPDATE ON \"public\".\"ints\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_ints_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_ints_into_oplog ON \"public\".\"ints\";",
      "    CREATE OR REPLACE FUNCTION delete_public_ints_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ints';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ints',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('i2', old.\"i2\", 'i4', old.\"i4\", 'i8', cast(old.\"i8\" as TEXT), 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_ints_into_oplog\n  AFTER DELETE ON \"public\".\"ints\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_ints_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'floats', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_floats_primarykey ON \"public\".\"floats\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_floats_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_floats_primarykey\n  BEFORE UPDATE ON \"public\".\"floats\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_floats_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_floats_into_oplog ON \"public\".\"floats\";",
      "    CREATE OR REPLACE FUNCTION insert_public_floats_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'floats';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'floats',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('f4', cast(new.\"f4\" as TEXT), 'f8', cast(new.\"f8\" as TEXT), 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_floats_into_oplog\n  AFTER INSERT ON \"public\".\"floats\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_floats_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_floats_into_oplog ON \"public\".\"floats\";",
      "    CREATE OR REPLACE FUNCTION update_public_floats_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'floats';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'floats',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('f4', cast(new.\"f4\" as TEXT), 'f8', cast(new.\"f8\" as TEXT), 'id', new.\"id\"),\n            jsonb_build_object('f4', cast(old.\"f4\" as TEXT), 'f8', cast(old.\"f8\" as TEXT), 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_floats_into_oplog\n  AFTER UPDATE ON \"public\".\"floats\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_floats_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_floats_into_oplog ON \"public\".\"floats\";",
      "    CREATE OR REPLACE FUNCTION delete_public_floats_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'floats';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'floats',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('f4', cast(old.\"f4\" as TEXT), 'f8', cast(old.\"f8\" as TEXT), 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_floats_into_oplog\n  AFTER DELETE ON \"public\".\"floats\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_floats_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'jsons', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_jsons_primarykey ON \"public\".\"jsons\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_jsons_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_jsons_primarykey\n  BEFORE UPDATE ON \"public\".\"jsons\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_jsons_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_jsons_into_oplog ON \"public\".\"jsons\";",
      "    CREATE OR REPLACE FUNCTION insert_public_jsons_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'jsons';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'jsons',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'jsb', new.\"jsb\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_jsons_into_oplog\n  AFTER INSERT ON \"public\".\"jsons\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_jsons_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_jsons_into_oplog ON \"public\".\"jsons\";",
      "    CREATE OR REPLACE FUNCTION update_public_jsons_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'jsons';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'jsons',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'jsb', new.\"jsb\"),\n            jsonb_build_object('id', old.\"id\", 'jsb', old.\"jsb\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_jsons_into_oplog\n  AFTER UPDATE ON \"public\".\"jsons\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_jsons_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_jsons_into_oplog ON \"public\".\"jsons\";",
      "    CREATE OR REPLACE FUNCTION delete_public_jsons_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'jsons';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'jsons',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'jsb', old.\"jsb\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_jsons_into_oplog\n  AFTER DELETE ON \"public\".\"jsons\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_jsons_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'enums', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_enums_primarykey ON \"public\".\"enums\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_enums_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_enums_primarykey\n  BEFORE UPDATE ON \"public\".\"enums\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_enums_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_enums_into_oplog ON \"public\".\"enums\";",
      "    CREATE OR REPLACE FUNCTION insert_public_enums_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'enums';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'enums',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('c', new.\"c\", 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_enums_into_oplog\n  AFTER INSERT ON \"public\".\"enums\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_enums_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_enums_into_oplog ON \"public\".\"enums\";",
      "    CREATE OR REPLACE FUNCTION update_public_enums_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'enums';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'enums',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('c', new.\"c\", 'id', new.\"id\"),\n            jsonb_build_object('c', old.\"c\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_enums_into_oplog\n  AFTER UPDATE ON \"public\".\"enums\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_enums_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_enums_into_oplog ON \"public\".\"enums\";",
      "    CREATE OR REPLACE FUNCTION delete_public_enums_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'enums';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'enums',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('c', old.\"c\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_enums_into_oplog\n  AFTER DELETE ON \"public\".\"enums\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_enums_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'blobs', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_blobs_primarykey ON \"public\".\"blobs\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_blobs_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_blobs_primarykey\n  BEFORE UPDATE ON \"public\".\"blobs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_blobs_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_blobs_into_oplog ON \"public\".\"blobs\";",
      "    CREATE OR REPLACE FUNCTION insert_public_blobs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'blobs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'blobs',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('blob', CASE WHEN new.\"blob\" IS NOT NULL THEN encode(new.\"blob\"::bytea, 'hex') ELSE NULL END, 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_blobs_into_oplog\n  AFTER INSERT ON \"public\".\"blobs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_blobs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_blobs_into_oplog ON \"public\".\"blobs\";",
      "    CREATE OR REPLACE FUNCTION update_public_blobs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'blobs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'blobs',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('blob', CASE WHEN new.\"blob\" IS NOT NULL THEN encode(new.\"blob\"::bytea, 'hex') ELSE NULL END, 'id', new.\"id\"),\n            jsonb_build_object('blob', CASE WHEN old.\"blob\" IS NOT NULL THEN encode(old.\"blob\"::bytea, 'hex') ELSE NULL END, 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_blobs_into_oplog\n  AFTER UPDATE ON \"public\".\"blobs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_blobs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_blobs_into_oplog ON \"public\".\"blobs\";",
      "    CREATE OR REPLACE FUNCTION delete_public_blobs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'blobs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'blobs',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('blob', CASE WHEN old.\"blob\" IS NOT NULL THEN encode(old.\"blob\"::bytea, 'hex') ELSE NULL END, 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_blobs_into_oplog\n  AFTER DELETE ON \"public\".\"blobs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_blobs_into_oplog_function();"
    ],
    "version": "1"
  }
]