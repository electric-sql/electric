export default [
  {
    "statements": [
      "CREATE TABLE \"items\" (\n  \"id\" TEXT NOT NULL,\n  \"content\" TEXT NOT NULL,\n  \"content_text_null\" TEXT,\n  \"content_text_null_default\" TEXT,\n  \"intvalue_null\" INTEGER,\n  \"intvalue_null_default\" INTEGER,\n  CONSTRAINT \"items_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"other_items\" (\n  \"id\" TEXT NOT NULL,\n  \"content\" TEXT NOT NULL,\n  \"item_id\" TEXT,\n  CONSTRAINT \"other_items_item_id_fkey\" FOREIGN KEY (\"item_id\") REFERENCES \"items\" (\"id\"),\n  CONSTRAINT \"other_items_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"timestamps\" (\n  \"id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"timestamps_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"datetimes\" (\n  \"id\" TEXT NOT NULL,\n  \"d\" TEXT NOT NULL,\n  \"t\" TEXT NOT NULL,\n  CONSTRAINT \"datetimes_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"bools\" (\n  \"id\" TEXT NOT NULL,\n  \"b\" INTEGER,\n  CONSTRAINT \"bools_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"uuids\" (\n  \"id\" TEXT NOT NULL,\n  CONSTRAINT \"uuids_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"ints\" (\n  \"id\" TEXT NOT NULL,\n  \"i2\" INTEGER,\n  \"i4\" INTEGER,\n  \"i8\" INTEGER,\n  CONSTRAINT \"ints_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"floats\" (\n  \"id\" TEXT NOT NULL,\n  \"f4\" REAL,\n  \"f8\" REAL,\n  CONSTRAINT \"floats_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"jsons\" (\n  \"id\" TEXT NOT NULL,\n  \"jsb\" TEXT_JSON,\n  CONSTRAINT \"jsons_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"enums\" (\n  \"id\" TEXT NOT NULL,\n  \"c\" TEXT,\n  CONSTRAINT \"enums_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"blobs\" (\n  \"id\" TEXT NOT NULL,\n  \"blob\" BLOB,\n  CONSTRAINT \"blobs_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'items', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;",
      "CREATE TRIGGER update_ensure_main_items_primarykey\n  BEFORE UPDATE ON \"main\".\"items\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_items_into_oplog;",
      "CREATE TRIGGER insert_main_items_into_oplog\n   AFTER INSERT ON \"main\".\"items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('content', new.\"content\", 'content_text_null', new.\"content_text_null\", 'content_text_null_default', new.\"content_text_null_default\", 'id', new.\"id\", 'intvalue_null', new.\"intvalue_null\", 'intvalue_null_default', new.\"intvalue_null_default\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_items_into_oplog;",
      "CREATE TRIGGER update_main_items_into_oplog\n   AFTER UPDATE ON \"main\".\"items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('content', new.\"content\", 'content_text_null', new.\"content_text_null\", 'content_text_null_default', new.\"content_text_null_default\", 'id', new.\"id\", 'intvalue_null', new.\"intvalue_null\", 'intvalue_null_default', new.\"intvalue_null_default\"), json_object('content', old.\"content\", 'content_text_null', old.\"content_text_null\", 'content_text_null_default', old.\"content_text_null_default\", 'id', old.\"id\", 'intvalue_null', old.\"intvalue_null\", 'intvalue_null_default', old.\"intvalue_null_default\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_items_into_oplog;",
      "CREATE TRIGGER delete_main_items_into_oplog\n   AFTER DELETE ON \"main\".\"items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('content', old.\"content\", 'content_text_null', old.\"content_text_null\", 'content_text_null_default', old.\"content_text_null_default\", 'id', old.\"id\", 'intvalue_null', old.\"intvalue_null\", 'intvalue_null_default', old.\"intvalue_null_default\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'other_items', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_other_items_primarykey;",
      "CREATE TRIGGER update_ensure_main_other_items_primarykey\n  BEFORE UPDATE ON \"main\".\"other_items\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_other_items_into_oplog;",
      "CREATE TRIGGER insert_main_other_items_into_oplog\n   AFTER INSERT ON \"main\".\"other_items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'other_items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'other_items', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('content', new.\"content\", 'id', new.\"id\", 'item_id', new.\"item_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_other_items_into_oplog;",
      "CREATE TRIGGER update_main_other_items_into_oplog\n   AFTER UPDATE ON \"main\".\"other_items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'other_items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'other_items', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('content', new.\"content\", 'id', new.\"id\", 'item_id', new.\"item_id\"), json_object('content', old.\"content\", 'id', old.\"id\", 'item_id', old.\"item_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_other_items_into_oplog;",
      "CREATE TRIGGER delete_main_other_items_into_oplog\n   AFTER DELETE ON \"main\".\"other_items\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'other_items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'other_items', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('content', old.\"content\", 'id', old.\"id\", 'item_id', old.\"item_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_other_items_item_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_other_items_item_id_into_oplog\n  AFTER INSERT ON \"main\".\"other_items\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'other_items') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'items', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"items\" WHERE \"id\" = new.\"item_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_other_items_item_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_other_items_item_id_into_oplog\n  AFTER UPDATE ON \"main\".\"other_items\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'other_items') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'items', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"items\" WHERE \"id\" = new.\"item_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'timestamps', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_timestamps_primarykey;",
      "CREATE TRIGGER update_ensure_main_timestamps_primarykey\n  BEFORE UPDATE ON \"main\".\"timestamps\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_timestamps_into_oplog;",
      "CREATE TRIGGER insert_main_timestamps_into_oplog\n   AFTER INSERT ON \"main\".\"timestamps\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'timestamps')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'timestamps', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_timestamps_into_oplog;",
      "CREATE TRIGGER update_main_timestamps_into_oplog\n   AFTER UPDATE ON \"main\".\"timestamps\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'timestamps')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'timestamps', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_timestamps_into_oplog;",
      "CREATE TRIGGER delete_main_timestamps_into_oplog\n   AFTER DELETE ON \"main\".\"timestamps\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'timestamps')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'timestamps', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'datetimes', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_datetimes_primarykey;",
      "CREATE TRIGGER update_ensure_main_datetimes_primarykey\n  BEFORE UPDATE ON \"main\".\"datetimes\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_datetimes_into_oplog;",
      "CREATE TRIGGER insert_main_datetimes_into_oplog\n   AFTER INSERT ON \"main\".\"datetimes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'datetimes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'datetimes', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('d', new.\"d\", 'id', new.\"id\", 't', new.\"t\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_datetimes_into_oplog;",
      "CREATE TRIGGER update_main_datetimes_into_oplog\n   AFTER UPDATE ON \"main\".\"datetimes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'datetimes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'datetimes', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('d', new.\"d\", 'id', new.\"id\", 't', new.\"t\"), json_object('d', old.\"d\", 'id', old.\"id\", 't', old.\"t\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_datetimes_into_oplog;",
      "CREATE TRIGGER delete_main_datetimes_into_oplog\n   AFTER DELETE ON \"main\".\"datetimes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'datetimes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'datetimes', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('d', old.\"d\", 'id', old.\"id\", 't', old.\"t\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'bools', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_bools_primarykey;",
      "CREATE TRIGGER update_ensure_main_bools_primarykey\n  BEFORE UPDATE ON \"main\".\"bools\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_bools_into_oplog;",
      "CREATE TRIGGER insert_main_bools_into_oplog\n   AFTER INSERT ON \"main\".\"bools\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'bools')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'bools', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('b', new.\"b\", 'id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_bools_into_oplog;",
      "CREATE TRIGGER update_main_bools_into_oplog\n   AFTER UPDATE ON \"main\".\"bools\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'bools')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'bools', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('b', new.\"b\", 'id', new.\"id\"), json_object('b', old.\"b\", 'id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_bools_into_oplog;",
      "CREATE TRIGGER delete_main_bools_into_oplog\n   AFTER DELETE ON \"main\".\"bools\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'bools')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'bools', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('b', old.\"b\", 'id', old.\"id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'uuids', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_uuids_primarykey;",
      "CREATE TRIGGER update_ensure_main_uuids_primarykey\n  BEFORE UPDATE ON \"main\".\"uuids\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_uuids_into_oplog;",
      "CREATE TRIGGER insert_main_uuids_into_oplog\n   AFTER INSERT ON \"main\".\"uuids\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'uuids')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'uuids', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_uuids_into_oplog;",
      "CREATE TRIGGER update_main_uuids_into_oplog\n   AFTER UPDATE ON \"main\".\"uuids\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'uuids')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'uuids', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\"), json_object('id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_uuids_into_oplog;",
      "CREATE TRIGGER delete_main_uuids_into_oplog\n   AFTER DELETE ON \"main\".\"uuids\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'uuids')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'uuids', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('id', old.\"id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'ints', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_ints_primarykey;",
      "CREATE TRIGGER update_ensure_main_ints_primarykey\n  BEFORE UPDATE ON \"main\".\"ints\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_ints_into_oplog;",
      "CREATE TRIGGER insert_main_ints_into_oplog\n   AFTER INSERT ON \"main\".\"ints\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'ints')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ints', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('i2', new.\"i2\", 'i4', new.\"i4\", 'i8', cast(new.\"i8\" as TEXT), 'id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ints_into_oplog;",
      "CREATE TRIGGER update_main_ints_into_oplog\n   AFTER UPDATE ON \"main\".\"ints\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'ints')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ints', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('i2', new.\"i2\", 'i4', new.\"i4\", 'i8', cast(new.\"i8\" as TEXT), 'id', new.\"id\"), json_object('i2', old.\"i2\", 'i4', old.\"i4\", 'i8', cast(old.\"i8\" as TEXT), 'id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ints_into_oplog;",
      "CREATE TRIGGER delete_main_ints_into_oplog\n   AFTER DELETE ON \"main\".\"ints\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'ints')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ints', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('i2', old.\"i2\", 'i4', old.\"i4\", 'i8', cast(old.\"i8\" as TEXT), 'id', old.\"id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'floats', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_floats_primarykey;",
      "CREATE TRIGGER update_ensure_main_floats_primarykey\n  BEFORE UPDATE ON \"main\".\"floats\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_floats_into_oplog;",
      "CREATE TRIGGER insert_main_floats_into_oplog\n   AFTER INSERT ON \"main\".\"floats\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'floats')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'floats', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('f4', cast(new.\"f4\" as TEXT), 'f8', cast(new.\"f8\" as TEXT), 'id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_floats_into_oplog;",
      "CREATE TRIGGER update_main_floats_into_oplog\n   AFTER UPDATE ON \"main\".\"floats\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'floats')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'floats', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('f4', cast(new.\"f4\" as TEXT), 'f8', cast(new.\"f8\" as TEXT), 'id', new.\"id\"), json_object('f4', cast(old.\"f4\" as TEXT), 'f8', cast(old.\"f8\" as TEXT), 'id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_floats_into_oplog;",
      "CREATE TRIGGER delete_main_floats_into_oplog\n   AFTER DELETE ON \"main\".\"floats\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'floats')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'floats', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('f4', cast(old.\"f4\" as TEXT), 'f8', cast(old.\"f8\" as TEXT), 'id', old.\"id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'jsons', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_jsons_primarykey;",
      "CREATE TRIGGER update_ensure_main_jsons_primarykey\n  BEFORE UPDATE ON \"main\".\"jsons\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_jsons_into_oplog;",
      "CREATE TRIGGER insert_main_jsons_into_oplog\n   AFTER INSERT ON \"main\".\"jsons\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'jsons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'jsons', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\", 'jsb', new.\"jsb\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_jsons_into_oplog;",
      "CREATE TRIGGER update_main_jsons_into_oplog\n   AFTER UPDATE ON \"main\".\"jsons\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'jsons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'jsons', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\", 'jsb', new.\"jsb\"), json_object('id', old.\"id\", 'jsb', old.\"jsb\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_jsons_into_oplog;",
      "CREATE TRIGGER delete_main_jsons_into_oplog\n   AFTER DELETE ON \"main\".\"jsons\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'jsons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'jsons', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('id', old.\"id\", 'jsb', old.\"jsb\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'enums', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_enums_primarykey;",
      "CREATE TRIGGER update_ensure_main_enums_primarykey\n  BEFORE UPDATE ON \"main\".\"enums\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_enums_into_oplog;",
      "CREATE TRIGGER insert_main_enums_into_oplog\n   AFTER INSERT ON \"main\".\"enums\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'enums')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'enums', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('c', new.\"c\", 'id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_enums_into_oplog;",
      "CREATE TRIGGER update_main_enums_into_oplog\n   AFTER UPDATE ON \"main\".\"enums\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'enums')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'enums', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('c', new.\"c\", 'id', new.\"id\"), json_object('c', old.\"c\", 'id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_enums_into_oplog;",
      "CREATE TRIGGER delete_main_enums_into_oplog\n   AFTER DELETE ON \"main\".\"enums\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'enums')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'enums', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('c', old.\"c\", 'id', old.\"id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'blobs', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_blobs_primarykey;",
      "CREATE TRIGGER update_ensure_main_blobs_primarykey\n  BEFORE UPDATE ON \"main\".\"blobs\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_blobs_into_oplog;",
      "CREATE TRIGGER insert_main_blobs_into_oplog\n   AFTER INSERT ON \"main\".\"blobs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'blobs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'blobs', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('blob', CASE WHEN new.\"blob\" IS NOT NULL THEN hex(new.\"blob\") ELSE NULL END, 'id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_blobs_into_oplog;",
      "CREATE TRIGGER update_main_blobs_into_oplog\n   AFTER UPDATE ON \"main\".\"blobs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'blobs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'blobs', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('blob', CASE WHEN new.\"blob\" IS NOT NULL THEN hex(new.\"blob\") ELSE NULL END, 'id', new.\"id\"), json_object('blob', CASE WHEN old.\"blob\" IS NOT NULL THEN hex(old.\"blob\") ELSE NULL END, 'id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_blobs_into_oplog;",
      "CREATE TRIGGER delete_main_blobs_into_oplog\n   AFTER DELETE ON \"main\".\"blobs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'blobs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'blobs', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('blob', CASE WHEN old.\"blob\" IS NOT NULL THEN hex(old.\"blob\") ELSE NULL END, 'id', old.\"id\"), NULL);\nEND;"
    ],
    "version": "1"
  }
]