[doc One-direction replication pg_1 -> pg_2]

[global psql=electric]
[global dprompt=\w+@\w+:(\S+)\#]
[global table_count=10]
[global row_count=100]

[include shared.luxinc]

[invoke setup]
# Starting and stopping Electric is required to properly initialize the database - it's what we expect to have done in production
# Namely, Electric exectutes `CREATE_REPLICATION_SLOT` before any data gets inserted, and thus we can receive inserted backlog on reconnection.
[invoke stop_electric 1]
[invoke stop_electric 2]

[shell sysbench_pg1]
    !make start_sysbench
    ?$dprompt
    [invoke sysbench_prepare pg_1 0 $table_count]
    !exit
    [invoke ok]

[shell sysbench_pg2]
    !make start_sysbench
    ?$dprompt
    [invoke sysbench_prepare pg_2 0 $table_count]
    !exit
    [invoke ok]

[invoke setup_rest]

[invoke log "Electrify the sysbench tables on pg_1"]
[shell pg_1]
    [loop iter 1..$table_count]
        [invoke electrify_table_tx "sbtest${iter}"]
    [endloop]

[invoke log "Electrify the sysbench tables on pg_2"]

[shell pg_2]
    [loop iter 1..$table_count]
        [invoke electrify_table_tx "sbtest${iter}"]
    [endloop]

[invoke log "Generate data on pg_1"]
[shell pg_1]
    [loop t 1..$table_count]
        [local table="sbtest${t}"]
        !BEGIN;
        ?electric=\*#
        [invoke pseudo_sysbench $table $row_count]
        ?electric=\*#
        !COMMIT;
        ?electric=#
    [endloop]

[macro wait_table table]
    [invoke wait-for "select count(id) from ${table};" 10 10 ${psql} ]
[endmacro]

[shell pg_2]
    # FIXME: couldn't figure out quickly why loop in the loop was not reliable
    [invoke wait_table sbtest1]
    [invoke wait_table sbtest2]
    [invoke wait_table sbtest3]
    [invoke wait_table sbtest4]
    [invoke wait_table sbtest5]
    [invoke wait_table sbtest6]
    [invoke wait_table sbtest7]
    [invoke wait_table sbtest8]
    [invoke wait_table sbtest9]
    [invoke wait_table sbtest10]

[cleanup]
    [invoke teardown]
