[doc One-direction replication pg_1 -> pg_2]

[global psql=electric]
[global dprompt=\w+!?@\w+:(\S+)[\#\$]]
[global eprompt=iex\(\d+\)>\s]

[include shared.luxinc]

[invoke setup]
# Starting and stopping Electric is required to properly initialize the database
# - it's what we expect to have done in production Namely, Electric exectutes
# `CREATE_REPLICATION_SLOT` before any data gets inserted, and thus we can
# receive inserted backlog on reconnection.
[invoke stop_electric]

[shell sysbench_pg1]
    !make start_sysbench
    ?$dprompt
    [invoke sysbench_prepare pg_1 10 10]
    !exit
    [invoke ok]

[shell sysbench_pg2]
    !make start_sysbench
    ?$dprompt
    [invoke sysbench_prepare pg_2 0 10]
    !exit
    [invoke ok]

[invoke setup_rest]

[macro wait_table table]
    [invoke wait-for "select count(id) from ${table};" "  10" 10 $psql]
[endmacro]

[shell pg_2]
   # couldn't figure out quickly why loop in the loop was not reliable
   [invoke wait_table sbtest1]

[shell ws1]
    [invoke log "Start WS client and start consuming data"]
    [invoke start_elixir_test 1]
    # issuer and secret key here must be the same as the issuer in the
    # config [:electric, Electric.Satellite.Auth, :provider]
    !provider = {Electric.Satellite.Auth.JWT, issuer: "dev.electric-sql.com", \
                  secret_key: "integration-tests-signing-key-example"}
    ?$eprompt
    !{ok, pid} = Electric.Test.SatelliteMockedClient.start_replicate_table( \
            Electric.Test.SatelliteWsClient.gen_schema(), \
            [ \
            {:auth, %{auth_provider: provider, user_id: "5a9a8b1d-263d-4cad-90f8-9190396161d7"}}, \
            {:id, "ws1"}, \
            {:sub, "0"}, \
            {:auto_in_sub, true}, \
            {:format, :compact}, \
            {:host, "electric_1"}, \
            {:auto_ping, :true} \
            ])
    ?+$eprompt
    ?(.*) %(.*).SatInStartReplicationReq\{.*lsn: ""

[shell pg_2]
    [invoke log "Make sure we replicate all data from PG1 -> PG2"]
    [invoke wait_table sbtest2]
    [invoke wait_table sbtest3]
    [invoke wait_table sbtest4]
    [invoke wait_table sbtest5]
    [invoke wait_table sbtest6]
    [invoke wait_table sbtest7]
    [invoke wait_table sbtest8]
    [invoke wait_table sbtest9]
    [invoke wait_table sbtest10]

[shell ws1]
    [invoke log "Wait for sync up to current state"]
    ?\d+:\d+:\d+.\d+ \[info\]\s+rec \[13\]: %\{commit_timestamp: \d+, lsn: (.*), trans_id: "", update: 10\}
    [local middle_lsn=$1]
    ?\d+:\d+:\d+.\d+ \[info\]\s+rec \[21\]: %\{commit_timestamp: \d+, lsn: (.*), trans_id: "", update: 10\}

[shell pg_2]
    [invoke log "Send new tx from PG2"]
    !INSERT INTO entries (content) VALUES ('Hello from a');
    ?INSERT 0 1

[global id=1f922fbb-016b-40c3-aeb1-e52682f82241]

[shell ws1]
    [timeout 10]
    [invoke log "Wait for Satellite to receive transaction from PG2"]
    ?\d+:\d+:\d+.\d+ \[info\]\s+rec \[23\]: %\{commit_timestamp: \d+, lsn: (.*), tags: \["postgres_2@(.*)"\], (.*) update: 1}
    [local middle_lsn=$1]

    [invoke log "Send transaction with insert from Satellite"]
    !Electric.Test.SatelliteMockedClient.insert( \
       pid, "$id", %{"id"=> "$id", "content"=> "Hello from Satellite", "content_b"=> ""} )
    ?:ok
    !Electric.Test.SatelliteMockedClient.push_changes(pid, 1666371243516)
    ?:ok
    ?+(.*) %{commit_timestamp: 1666371243516, lsn: (.*) tags: \["ws1@1666371243516"\], (.*)
    ?%(.*)SatPingResp\{[^\}]*lsn: <<131, 97, 1>>

[shell electric]
    ?Hello from Satellite
[shell pg_2]
    [invoke wait-for "select * from entries;" "Hello from Satellite" 10 $psql]
[shell pg_1]
    [invoke wait-for "select * from entries;" "Hello from Satellite" 10 $psql]

[shell ws1]
    [invoke log "Send transaction with update from Satellite"]
    !Electric.Test.SatelliteMockedClient.update( \
       pid, "$id", %{"id"=> "$id", "content"=> "How are you?", "content_b"=> ""} )
    ?:ok
    !Electric.Test.SatelliteMockedClient.push_changes(pid, 1666371243518)
    ?:ok
    ?+(.*) %{commit_timestamp: 1666371243518, lsn: (.*) tags: \["ws1@1666371243518"\], (.*)
    ?%(.*)SatPingResp\{[^\}]*lsn: <<131, 97, 2>>

[shell electric]
    ?How are you?
[shell pg_2]
    [invoke wait-for "select * from entries;" "How are you?" 10 $psql]
[shell pg_1]
    [invoke wait-for "select * from entries;" "How are you?" 10 $psql]

[shell ws1]
    [invoke log "Send transaction with delete from Satellite"]
    !Electric.Test.SatelliteMockedClient.delete(pid, "$id")
    ?:ok
    !Electric.Test.SatelliteMockedClient.push_changes(pid, 1666371243520)
    ?:ok
    ?+(.*) %{commit_timestamp: 1666371243520, (.*) tags: \[\], (.*)
    ?%(.*)SatPingResp\{[^\}]*lsn: <<131, 97, 3>>

[shell electric]
    ?How are you?
[shell pg_2]
    [invoke wait-for "select * from entries;" "(1 row)" 10 $psql]
[shell pg_1]
    [invoke wait-for "select * from entries;" "(1 row)" 10 $psql]

[shell ws1]
    !Electric.Test.SatelliteWsClient.disconnect()
    ?:ok

[cleanup]
    [invoke teardown]
