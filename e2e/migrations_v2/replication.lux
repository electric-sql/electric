[doc test flow of migrations from pg -> electric -> replication stream]

[global psql=electric]
[global user_id_1=1]
[global migration_version=20230504114018]

[include shared.luxinc]
[invoke setup]

[macro client_session user_id session_id]
    [invoke log "user ${user_id}: session ${session_id}: start"]
    [local client_id=client_${user_id}_${session_id}]
    !provider = {Electric.Satellite.Auth.JWT, issuer: "dev.electric-sql.com", \
                    secret_key: "integration-tests-signing-key-example"}
    ?$eprompt
    !{:ok, conn} = Electric.Test.SatelliteWsClient.connect_and_spawn( \
            [ auth: %{auth_provider: provider, user_id: "$user_id"}, \
                id: "$client_id", \
                debug: true, \
                sub: "0", \
                auto_in_sub: true, \
                format: :term, \
                host: "electric_1", \
                auto_ping: :true \
            ])
    ?+$eprompt
    ?(.*) %(.*).SatInStartReplicationReq{(.*)lsn: "", (.*)
    ?(.*) %(.*).SatInStartReplicationResp{(.*)

[endmacro]

[shell pg_1]
    [invoke log "run migration on postgres"]
    !BEGIN;
    ?electric=\*#
    !SELECT electric.migration_version('$migration_version');
    ?electric=\*#
    !CREATE TABLE mtable1 (id uuid PRIMARY KEY);
    ?electric=\*#
    !CALL electric.electrify('mtable1');
    ?electric=\*#
    !COMMIT;
    ?electric=#

[shell user_1_ws1]
    [invoke start_elixir_test 1]
    [invoke client_session $user_id_1 1]

[shell electric]
    ?.* client_id=client_1_1 .* \[info\] Serializing migration "$migration_version"

[shell user_1_ws1]
    ?.*SatOpMigrate\{.*sql: "CREATE TABLE \\"mtable1\\".*

[cleanup]
    [invoke teardown]
