[doc]
Test that Satellite can execute queries on a newly created table that originates from a PG migration

This test differs from `satellite_apply.lux` because when Satellite receives the migration from PG,
Satellite is the first one to insert new rows in the newly created table.
In contrast, `satellite_apply.lux` waits for the Satellites to receive the migration and then PG inserts rows in the table.
[enddoc]

[global fail_pattern=[Ee][Rr][Rr][Oo][Rr]]
[global psql=electric]
[global node=>]
[global migration_dir=m_sanity_check]
[global migration_version_1=20230504114018]
[global migration_version_2=20230505100008]

[include shared.luxinc]
[include satellite.luxinc]

[macro migrate_pg version ddl]
  [shell pg_1]
      [invoke log "run migration ${version} on postgres"]
      !BEGIN;
      ?electric=\*#
      !SELECT electric.migration_version('$version');
      ?electric=\*#
      !${ddl}
      ?electric=\*#
      !COMMIT;
      ?electric=#
[endmacro]

#===============================================================================
# Setup test
#===============================================================================

[invoke setup]

#===============================================================================
# Beginning of the actual test
#===============================================================================

[shell satellite_1]
    -$fail_pattern
    [invoke setup_client 1 "electric_1" 5133]

[shell satellite_2]
    -$fail_pattern
    [invoke setup_client 2 "electric_1" 5133]

[invoke log "Both satellites connected"]

[invoke log "Migrate postgres CREATE TABLE items"]

[invoke migrate_pg $migration_version_1 "CREATE TABLE public.items (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), content VARCHAR(64) NOT NULL, content_text_null VARCHAR(64), content_text_null_default VARCHAR(64) DEFAULT '', intvalue_null integer, intvalue_null_default integer DEFAULT 10);"]

[invoke log "Postgres migrated $migration_version_1"]

#==============================================================================
# Verify that Satellite applies incoming migration from PG
#==============================================================================

[global pg_id1=f989b58b-980d-4d3c-b178-adb6ae8222f1]
[global pg_id2=a7a7d9be-a51c-4f86-a4ff-dfdc0c016fe2]
[global pg_id3=4bc27df5-0a7e-4695-b386-e39ddab231a4]

[shell satellite_1]
    [invoke log "wait for items table on satellite_1"]
    [invoke node_await_table "name: 'items'"]


[shell satellite_2]
    [invoke log "wait for items table on satellite_2"]
    [invoke node_await_table "name: 'items'"]

#==============================================================================
# Let Satellites insert rows in the newly created table
# and wait for PG to receive the rows
#==============================================================================

[shell satellite_1]
    [invoke log "Insert data into satellite_1"]
    [invoke node_await_insert "['hello from satellite_1']"]

[shell satellite_2]
    [invoke log "Insert data into satellite_2"]
    [invoke node_await_insert "['hello from satellite_2']"]

[loop pg pg_1]
  [shell ${pg}]
    [invoke log "Verify that ${pg} have received data from both Satellites"]
    [invoke wait-for "SELECT * FROM public.items;" "hello from satellite_1" 10 ${psql}]
    [invoke wait-for "SELECT * FROM public.items;" "hello from satellite_2" 10 ${psql}]
[endloop]

#==============================================================================
# Let PG insert some rows in the newly created table
#==============================================================================

[shell pg_1]
    [invoke log "Insert data into postgres_1"]
    !INSERT INTO public.items (id, content) VALUES ('${pg_id1}', 'hello from pg_1');
    ?$psql

[shell pg_1]
    [invoke log "Insert data into postgres_1"]
    !INSERT INTO public.items (id, content) VALUES ('${pg_id3}', 'hello from pg_3');
    ?$psql

[shell satellite_1]
    [invoke node_await_get ${pg_id1}]
    [invoke node_await_get ${pg_id3}]

[shell satellite_2]
    [invoke node_await_get ${pg_id1}]
    [invoke node_await_get ${pg_id3}]

#==============================================================================
# Execute a 2nd migration that adds a column to the table
#==============================================================================

[invoke migrate_pg $migration_version_2 "ALTER TABLE public.items ADD COLUMN another text;"]

[shell satellite_1]
    [invoke log "wait for new column on satellite_1"]
    [invoke node_await_column items another]

[shell satellite_2]
    [invoke log "wait for new column on satellite_2"]
    [invoke node_await_column items another]

[cleanup]
  [invoke teardown]
