[doc NodeJS Satellite correctly syncs json values from and to Electric]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[shell proxy_1]
    [local sql=
        """
        CREATE TABLE public.jsons (
            id  TEXT PRIMARY KEY,
            -- js  JSON,
            jsb JSONB
        );
        ALTER TABLE public.jsons ENABLE ELECTRIC;
        """]
    [invoke migrate_pg 20230908 $sql]

[invoke setup_client 1 electric_1 5133]

[shell satellite_1]
    [invoke node_await_table "jsons"]
    [invoke node_sync_table "jsons"]

[shell pg_1]
    !INSERT INTO public.jsons (id, jsb) VALUES ('row1', '[ { "a": 1 }, { "d": false,    "b": 5 } ]');
    ??INSERT 0 1

[shell satellite_1]
    # Wait for the rows to arrive
    [invoke node_await_get_json "row1"]

    # read raw JSON that is stored in the DB
    # json must preserve whitespace and key ordering
    #[invoke node_get_json_raw "row1" "{ a: 1, c:    true, b: \"foo\", d: null, e: [1,2,3] }"]
    # when parsed as JSON, whitespace is trimmed but key order is kept
    #[invoke node_get_json "row1" "{ a: 1, c: true, b: \"foo\", d: null, e: [1,2,3] }"]
    # jsonb trims white space and sorts keys
    [invoke node_get_jsonb_raw "row1" "[ { a: 1 }, { b: 5, d: false } ]"]
    [invoke node_get_jsonb "row1" "[ { a: 1 }, { b: 5, d: false } ]"]

    # write DB NULL value
    [invoke node_write_json "row2" "null"]
    [invoke node_get_jsonb "row2" "null"]

    [invoke node_write_json "row3" "client.JsonNull"]
    # When running with PG on the client we don't yet support top-level JSON null values
    # instead top-level JSON null values become DB null values
    [invoke node_get_jsonb_regex "row3" "\{ __is_electric_json_null__: true \}|null"]

    # write regular JSON values
    [invoke node_write_json "row4" "{ a: true, b: [ 1, 2 ] }"]
    [invoke node_get_jsonb "row4" "{ a: true, b: [ 1, 2 ] }"]

    [invoke node_write_json "row5" "[ 1, { a: 'foo' }, true ]"]
    [invoke node_get_jsonb "row5" "[ 1, { a: 'foo' }, true ]"]

    [invoke node_write_json "row6" "[\"it's âš¡\", {}, \"\\u2603 under \\u2602\"]"]
    [invoke node_get_jsonb "row6" "[ \"it's âš¡\", {}, 'â˜ƒ under â˜‚' ]"]

    # Write JSON string "null"
    [invoke node_write_json "row7" "'null'"]
    [invoke node_get_jsonb "row7" "'null'"]

    # Even though JSON can encode the NUL code point and unpaired surrogates, those will fail Postgres' jsonb validation.
    # Per the builtin JSON.stringify() function:
    #
    #     > JSON.stringify("hello\x00NUL")
    #     '"hello\\u0000NUL"'
    #     > JSON.stringify("\ud83d\ude43")
    #     '"ðŸ™ƒ"'
    #     > JSON.stringify("\ud83d")
    #     '"\\ud83d"'
    #     > JSON.stringify("\ude43")
    #     '"\\ude43"'
    #
    # See VAX-1365.
    #
    # NOTE: this currently causes Electric's validation to fail because the chosen JSON library
    # does not support Unicode escape sequences.
    #[invoke node_write_json "row7" "['\x00', '\ud83d\ude43', '\ud83d', '\ude43']"]
    #[invoke node_get_jsonb "row7" "[ '\"\\u0000\"', '\"ðŸ™ƒ\"', '\"\\ud83d\"', '\"\\ude43\"' ]"]

[shell pg_1]
    [invoke wait-for "SELECT * FROM public.jsons;" "row4" 10 $psql]

    !SELECT * FROM public.jsons;
    #??row1 | {"a": 1,    "c": true, "b": "foo", "d": null, "e": [1,2,3] } | [{"a": 1}, {"b": {"c": true}, "d": false}]
    #??row2 |                 { __is_electric_json_null__: true } |                                                null
    #??row3 |                                                 500 |                            {"a": true, "b": [1, 2]}
    #??row4 |                           [ 1, { a: "foo" }, true ] |                                               "bar"
    ??row1 | [{"a": 1}, {"b": 5, "d": false}]
    ??row2 | <NULL>
    ?row3 \| null|<NULL>
    ??row4 | {"a": true, "b": [1, 2]}
    ??row5 | [1, {"a": "foo"}, true]
    ??row6 | ["it's âš¡", {}, "â˜ƒ under â˜‚"]
    ??row7 | "null"

# Start a new Satellite client and verify that it receives all rows
[invoke setup_client 2 electric_1 5133]

[shell satellite_2]
    [invoke node_await_table "jsons"]
    [invoke node_sync_table "jsons"]

    # Wait for the rows to arrive
    [invoke node_await_get_json "row6"]

    # read raw JSON that is stored in the DB
    # json must preserve whitespace and key ordering
    #[invoke node_get_json_raw "row1" "{ a: 1, c:    true, b: \"foo\", d: null, e: [1,2,3] }"]
    # when parsed as JSON, whitespace is trimmed but key order is kept
    #[invoke node_get_json "row1" "{ a: 1, c: true, b: \"foo\", d: null, e: [1,2,3] }"]
    # jsonb trims white space and sorts keys
    [invoke node_get_jsonb_raw "row1" "[ { a: 1 }, { b: 5, d: false } ]"]
    [invoke node_get_jsonb "row1" "[ { a: 1 }, { b: 5, d: false } ]"]

    #[invoke node_get_json "row2" "{ __is_electric_json_null__: true }"]
    [invoke node_get_jsonb "row2" "null"]

    #[invoke node_get_json "row3" "null"]
    [invoke node_get_jsonb_regex "row3" "\{ __is_electric_json_null__: true \}|null"]
    #[invoke node_get_jsonb "row3" "{ __is_electric_json_null__: true }"]

    #[invoke node_get_json "row4" 500]
    [invoke node_get_jsonb "row4" "{ a: true, b: [ 1, 2 ] }"]

    #[invoke node_get_json "row5" "'bar'"]
    [invoke node_get_jsonb "row5" "[ 1, { a: 'foo' }, true ]"]

    [invoke node_get_jsonb "row6" "[ \"it's âš¡\", {}, 'â˜ƒ under â˜‚' ]"]

    [invoke node_get_jsonb "row7" "'null'"]

[cleanup]
  [invoke teardown]
