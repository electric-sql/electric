[include ../common.luxinc]
[global fail_pattern=[Ee][Rr][Rr][Oo][Rr]]
[global psql=electric=]

[newshell log]

[macro setup]
    [newshell postgres_logs]
        [progress start development environment]
        !make start_dev_env
        [invoke ok]
        -$fail_pattern
        !make log_dev_env

    [newshell pg_1]
        [invoke start_psql pg_1]
        -$fail_pattern
        [timeout 2]

    [newshell electric]
        [timeout 5]
        !make start_electric_1
        -$fail_pattern
        ?START_REPLICATION SLOT
         [progress setup finished]
[endmacro]

[macro teardown]
    [progress stop development environment]
    !make stop_dev_env
    [invoke ok]
[endmacro]

[macro client_session user_id session_id]
    [invoke log "user ${user_id}: session ${session_id}: start"]
    [local client_id=client_${user_id}_${session_id}]
    !auth_config = Electric.Satellite.Auth.Secure.build_config!( \
                     alg: "HS256", key: "integration-tests-signing-key-example" \
                   )
    ?$eprompt
    """!{:ok, conn} = Electric.Test.SatelliteWsClient.connect_and_spawn(
                        auth: %{auth_config: auth_config, user_id: "$user_id"},
                        id: "$client_id",
                        debug: true,
                        sub: "",
                        auto_in_sub: true,
                        format: :term,
                        host: "electric_1",
                        auto_ping: true)
    """
    ?+$eprompt
    ?+sending to: (.*)%Electric.Satellite.V\d+.SatInStartReplicationReq\{(.*)lsn: "", ([^\}]*)\}
    ?rec \[\d\]: %Electric.Satellite.V\d+.SatInStartReplicationResp\{
[endmacro]

[macro client_session_continue user_id session_id position subscription_ids]
    [invoke log "user ${user_id}: session ${session_id}: start"]
    [local client_id=client_${user_id}_${session_id}]
    !auth_config = Electric.Satellite.Auth.Secure.build_config!( \
                     alg: "HS256", key: "integration-tests-signing-key-example" \
                   )
    ?$eprompt
    """!{:ok, conn} = Electric.Test.SatelliteWsClient.connect_and_spawn(
                        auth: %{auth_config: auth_config, user_id: "$user_id"},
                        id: "$client_id",
                        debug: true,
                        sub: "$position",
                        subscription_ids: ~w|$subscription_ids|,
                        auto_in_sub: true,
                        format: :term,
                        host: "electric_1",
                        auto_ping: true)
    """
    ?started #PID
    ?Auth passed
    ?Subscribed
    ?sending to: (.*)%Electric.Satellite.V\d+.SatInStartReplicationReq\{(.*)lsn: "", ([^\}]*)\}
    ?rec \[\d\]: %Electric.Satellite.V\d+.SatInStartReplicationResp\{
[endmacro]

[macro elixir_client_subscribe tables]
    """!
    Electric.Test.SatelliteWsClient.send_data(conn, Electric.Test.SatelliteWsClient.build_subscription_request(request_1: [tables: ~w|$tables|]))
    """
    ?+$eprompt
    ?rec \[\d\]: %Electric.Satellite.V\d+.SatSubsResp\{[^\}]+err: nil
[endmacro]

[macro elixir_client_subscribe_with_id id tables]
    """!
    Electric.Test.SatelliteWsClient.send_data(conn, Electric.Test.SatelliteWsClient.build_subscription_request("$id", request_1: [tables: ~w|$tables|]))
    """
    ?+$eprompt
    ?rec \[\d\]: %Electric.Satellite.V\d+.SatSubsResp\{[^\}]+err: nil
[endmacro]


[macro start_satellite name]
[newshell satellite_${name}]
    !make start_satellite_client_${name}
[endmacro]

[macro migrate_pg version ddl]
    [invoke log "run migration ${version} on postgres"]
    """!
    BEGIN;
    SELECT electric.migration_version('$version');
    ${ddl}
    COMMIT;
    """
    ?$psql
    [my old=$LUX_SHELLNAME]
    [shell electric]
        ??[info] Applying migration $version
    [shell $old]
[endmacro]

[macro migrate_items_table version]
    [local sql=
        """
        CREATE TABLE public.items (
            id TEXT PRIMARY KEY DEFAULT uuid_generate_v4(),
            content VARCHAR NOT NULL,
            content_text_null VARCHAR,
            content_text_null_default VARCHAR DEFAULT '',
            intvalue_null integer,
            intvalue_null_default integer DEFAULT 10
        );
        CALL electric.electrify('public.items');
        """]
    [invoke migrate_pg $version $sql]
[endmacro]
