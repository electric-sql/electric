[doc When an update coming from Satellite doesn't have the latest DELETE operation in the observed tags, it restores the row]
[include _shared.luxinc]

[invoke setup]

[shell proxy_1]
    [local sql=
        """
        CREATE TABLE public.items (
            id UUID PRIMARY KEY,
            content TEXT NOT NULL
        );
        ALTER TABLE public.items ENABLE ELECTRIC;
        """]
    [invoke migrate_pg 001 $sql]

    [invoke migrate_other_items_table 002]

[newshell user_1_ws1]
    -$fail_pattern
    [invoke start_elixir_test 1]
    [invoke client_session 1 1]
    
    !alias Electric.Satellite.{SatRelation, SatRelationColumn, SatOpInsert, SatOpUpdate, SatOpCompensation, SatOpRow}

    """!
    Satellite.TestWsClient.send_data(conn, %SatRelation{
      columns: [
        %SatRelationColumn{name: "id", type: "text", is_nullable: false},
        %SatRelationColumn{name: "content", type: "text", is_nullable: false},
      ],
      relation_id: 1,
      schema_name: "public",
      table_name: "items",
      table_type: :TABLE
    })
    """
    ?$eprompt
    """!
    Satellite.TestWsClient.send_data(conn, %SatRelation{
      columns: [
        %SatRelationColumn{name: "id", type: "text", is_nullable: false},
        %SatRelationColumn{name: "content", type: "text", is_nullable: false},
        %SatRelationColumn{name: "item_id", type: "text", is_nullable: false},
      ],
      relation_id: 2,
      schema_name: "public",
      table_name: "other_items",
      table_type: :TABLE
    })
    """
    ?$eprompt
    """!
    Satellite.TestWsClient.send_data(conn, ProtocolHelpers.transaction("1", DateTime.to_unix(DateTime.utc_now(), :millisecond), [
        %SatOpInsert{relation_id: 1, row_data: %SatOpRow{nulls_bitmask: <<0>>, values: ["00000000-0000-0000-0000-000000000000", "test_content"]}},
        %SatOpCompensation{relation_id: 1, pk_data: %SatOpRow{nulls_bitmask: <<0::1, 1::1, 0::6>>, values: ["00000000-0000-0000-0000-000000000000", ""]}},
        %SatOpInsert{relation_id: 2, row_data: %SatOpRow{nulls_bitmask: <<0>>, values: ["00000000-0000-0000-0000-000000000001", "child content", "00000000-0000-0000-0000-000000000000"]}},
    ]))
    """
    ?$eprompt

[shell electric]
    # Check that the transaction made it to Postgres.SlotServer / Postgres.Writer
    ??=postgres_1 [debug] Processed tx changes (# pre:
    ??"content" => "test_content"
    ??record: %{"content" => nil, "id" => "00000000-0000-0000-0000-000000000000"}

    # Wait for the roundtrip of the insert back to Electric
    ?component=CachedWal.EtsBacked origin=postgres_1 \[debug\] Saving transaction \d+ at \d+/[\dA-F]+ with changes \
      \[%Electric.Replication.Changes.NewRecord\{\
          relation: \{"public", "items"\}, \
          record: %\{"content" => "test_content", "id" => "00000000-0000-0000-0000-000000000000"\}
    ?%Electric.Replication.Changes.UpdatedRecord\{\
          relation: \{"public", "items"\}, \
          old_record: %\{"content" => "test_content", "id" => "00000000-0000-0000-0000-000000000000"\}, \
          record: %\{"content" => "test_content", "id" => "00000000-0000-0000-0000-000000000000"\}

[cleanup]
   [invoke teardown]
