[doc NodeJS Satellite correctly syncs int2 and int4 values from and to Electric]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[shell pg_1]
    [local sql=
        """
        CREATE TABLE public.ints (
            id TEXT PRIMARY KEY,
            i2 SMALLINT,
            i4 INTEGER
        );
        CALL electric.electrify('public.ints');
        """]
    [invoke migrate_pg 20230908 $sql]

[invoke setup_client 1 electric_1 5133]

[shell satellite_1]
    [invoke node_await_table "ints"]
    [invoke node_sync_table "ints"]

[shell pg_1]
    !INSERT INTO public.ints (id, i2, i4) VALUES ('row1', -32768, -2147483648), ('row2', 32767, 2147483647);
    ??INSERT 0 2

[shell satellite_1]
    # Wait for the rows to arrive
    [invoke node_await_get_int "row2"]
        
    [invoke node_get_int "row1" -32768 -2147483648]
    [invoke node_get_int "row2" 32767 2147483647]

    # Can write valid ints to the DB
    !await client.write_int(db, 'row3', 0, 0)
    ?{ id: 'row3', i2: 0, i4: 0 }
    ?$node

[shell pg_1]
    [invoke wait-for "SELECT * FROM public.ints;" "row3" 10 $psql]

    !SELECT * FROM public.ints;
    ?row1|-32768|-2147483648
    ?row2|32767|2147483647
    ?row3|0|0

# Start a new Satellite client and verify that it receives all rows
[invoke setup_client 2 electric_1 5133]

[shell satellite_2]
    [invoke node_await_table "ints"]
    [invoke node_sync_table "ints"]

    # Wait for the rows to arrive
    [invoke node_await_get_int "row3"]

    [invoke node_get_int "row1" -32768 -2147483648]
    [invoke node_get_int "row2" 32767 2147483647]
    [invoke node_get_int "row3" 0 0]

    # Reset the failure pattern because we don't want it to match the errors below
    -
    # Can't write invalid ints to the DB
    !await client.write_int(db, 'row4', 32768, 5)
    ?Number must be less than or equal to 32767

    !await client.write_int(db, 'row4', 5, 2147483648)
    ?Number must be less than or equal to 2147483647

[cleanup]
  [invoke teardown]
