[doc NodeJS Satellite correctly syncs integer values from and to Electric]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[shell proxy_1]
    [local sql=
        """
        CREATE TABLE public.ints (
            id TEXT PRIMARY KEY,
            i2 SMALLINT,
            i4 INTEGER,
            i8 BIGINT
        );
        ALTER TABLE public.ints ENABLE ELECTRIC;
        ELECTRIC GRANT ALL ON public.ints TO AUTHENTICATED;
        """]
    [invoke migrate_pg 20230908 $sql]

[invoke setup_client 1 electric_1 5133]

[shell satellite_1]
    [invoke node_await_table "ints"]
    [invoke node_sync_table "ints"]

[shell proxy_1]
    """!
    INSERT INTO public.ints (id, i2, i4, i8) VALUES
      ('row1', -32768, -2147483648, -9223372036854775808),
      ('row2', 32767, 2147483647, 9223372036854775807);
    """
    ??INSERT 0 2

[shell satellite_1]
    # Wait for the rows to arrive
    [invoke node_await_get_int "row2"]

    [invoke node_get_int "row1" -32768 -2147483648 -9223372036854775808n]
    [invoke node_get_int "row2" 32767 2147483647 9223372036854775807n]

    # Can write valid ints to the DB
    !await client.write_int(db, 'row3', 0, 0, 0)
    ??{ id: 'row3', i2: 0, i4: 0, i8: 0n }
    ?$node

    !await client.write_int(db, 'row4', 0, 0, 9223372036854775806n)
    ??{ id: 'row4', i2: 0, i4: 0, i8: 9223372036854775806n }
    ?$node

    !await client.write_int(db, 'row5', null, null, null)
    ??{ id: 'row5', i2: null, i4: null, i8: null }
    ?$node

[shell proxy_1]
    [invoke wait-for "SELECT * FROM public.ints;" "row4" 10 $psql]

    !SELECT * FROM public.ints;
    ??row1 | -32768 | -2147483648 | -9223372036854775808
    ??row2 |  32767 |  2147483647 |  9223372036854775807
    ??row3 |      0 |           0 |                    0
    ??row4 |      0 |           0 |  9223372036854775806
    ??row5 | <NULL> |      <NULL> |               <NULL>

# Start a new Satellite client and verify that it receives all rows
[invoke setup_client 2 electric_1 5133]

[shell satellite_2]
    [invoke node_await_table "ints"]
    [invoke node_sync_table "ints"]

    # Wait for the rows to arrive
    [invoke node_await_get_int "row3"]

    [invoke node_get_int "row1" -32768 -2147483648 -9223372036854775808n]
    [invoke node_get_int "row2" 32767 2147483647 9223372036854775807n]
    [invoke node_get_int "row3" 0 0 0n]
    [invoke node_get_int "row4" 0 0 9223372036854775806n]
    [invoke node_get_int "row5" null null null]

    # Reset the failure pattern because we don't want it to match the errors below
    -
    # Can't write invalid ints to the DB
    !await client.write_int(db, 'row6', 32768, 5, 0)
    ??Number must be less than or equal to 32767

    !await client.write_int(db, 'row6', 5, 2147483648, 0)
    ??Number must be less than or equal to 2147483647

    !await client.write_int(db, 'row6', 5, 0, 9223372036854775808n)
    ??BigInt must be less than or equal to 9223372036854775807

[cleanup]
  [invoke teardown]
