[doc NodeJS Satellite correctly syncs UUID values from and to Electric]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[shell pg_1]
    [local sql=
        """
        CREATE TABLE public.uuids (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4()
        );
        CALL electric.electrify('public.uuids');
        """]
    [invoke migrate_pg 20230908 $sql]

[invoke setup_client 1 electric_1 5133]

[shell satellite_1]
    [invoke node_await_table "uuids"]
    [invoke node_sync_table "uuids"]

[shell pg_1]
    !INSERT INTO public.uuids (id) VALUES ('02c0c547-7e2c-4afb-aa40-38413fd91dc4'), ('67b2db7d-7a4e-4ead-8883-01bf4946fec2');
    ??INSERT 0 2

[shell satellite_1]
    # Wait for the rows to arrive
    [invoke node_await_get_uuid "67b2db7d-7a4e-4ead-8883-01bf4946fec2"]
        
    [invoke node_get_uuid "02c0c547-7e2c-4afb-aa40-38413fd91dc4"]
    [invoke node_get_uuid "67b2db7d-7a4e-4ead-8883-01bf4946fec2"]

    # Can write valid uuids to the DB
    !await client.write_uuid(db, '09e3e433-e9f1-46b4-a18f-1e4e0b6c6278')
    ?{ id: '09e3e433-e9f1-46b4-a18f-1e4e0b6c6278' }
    ?$node

[shell pg_1]
    [invoke wait-for "SELECT * FROM public.uuids;" "09e3e433-e9f1-46b4-a18f-1e4e0b6c6278" 10 $psql]

    !SELECT * FROM public.uuids;
    ?02c0c547-7e2c-4afb-aa40-38413fd91dc4
    ?67b2db7d-7a4e-4ead-8883-01bf4946fec2
    ?09e3e433-e9f1-46b4-a18f-1e4e0b6c6278

# Start a new Satellite client and verify that it receives all rows
[invoke setup_client 2 electric_1 5133]

[shell satellite_2]
    [invoke node_await_table "uuids"]
    [invoke node_sync_table "uuids"]

    # Wait for the rows to arrive
    [invoke node_await_get_uuid "09e3e433-e9f1-46b4-a18f-1e4e0b6c6278"]

    [invoke node_get_uuid "02c0c547-7e2c-4afb-aa40-38413fd91dc4"]
    [invoke node_get_uuid "67b2db7d-7a4e-4ead-8883-01bf4946fec2"]

    # Reset the failure pattern because we don't want it to match the error below
    -
    # Can't write invalid uuids to the DB
    # the uuid below has one digit too much in the last part
    !await client.write_uuid(db, '09e3e433-e9f1-46b4-a18f-1e4e0b6c62789')
    """?
    Uncaught:
    \[
      \{
        "validation": "uuid",
        "code": "invalid_string",
        "message": "Invalid uuid",
        "path": \[
          "data",
          "id"
        ]
      }
    ]
    """

[cleanup]
  [invoke teardown]

# TODO: test that Zod validation fails on writing invalid UUID