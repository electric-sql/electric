[doc When NodeJS Satellite connects to Electric for the first time, it receives those migrations it does not already have]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[global migration1_vsn=20230719_01]
[global migration2_vsn=20230719_02]

# Create two migrations with electrified tables on the server.
[shell pg_1]
  [invoke migrate_pg $migration1_vsn "CREATE TABLE public.foo (id TEXT PRIMARY KEY);CALL electric.electrify('public.foo');"]
  [invoke migrate_pg $migration2_vsn "CREATE TABLE public.bar (id TEXT PRIMARY KEY);CALL electric.electrify('public.bar');"]

# Bundle the first migration on the client.
[global client_migrations=
    """
    [{
        statements: ['CREATE TABLE IF NOT EXISTS foo (id TEXT PRIMARY KEY NOT NULL);'],
        version: '$migration1_vsn'
    }]
    """]

[invoke setup_client_with_migrations 1 "electric_1" 5133 $client_migrations]

[shell satellite_1]
  # Make sure we don't receive a SatOpLog message with $migration1_vsn in it.
  -vsn: $migration1_vsn

  # The client has the first migration bundled.
	?applying migration: $migration1_vsn

  # The client starts replication from scratch.
  ?no previous LSN, start replication from scratch
  # It passes its schema version to the server.
  ??[proto] send: #SatInStartReplicationReq{lsn: , schema: $migration1_vsn
  ??[proto] recv: #SatInStartReplicationResp{}

  # The client receives only the second migration. Since the client sends migrations in order, we're sure that we haven't seen migration 1
  ?\[proto\] recv: #SatOpLog\{.*#Migrate\{vsn: $migration2_vsn, for: bar

[cleanup]
  [invoke teardown]
