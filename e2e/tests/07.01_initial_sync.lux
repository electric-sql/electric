[doc A parametrized scenario for initial shape subscription data fetching]
[include _shared.luxinc]

[invoke setup]

### Define utility functions

[shell pg_1]
    """!
    CREATE FUNCTION gen_random_string(
            IN string_length INTEGER,
            IN possible_chars TEXT DEFAULT '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
        ) RETURNS text
        LANGUAGE plpgsql
        AS $$$$
    DECLARE
        output TEXT = '';
        i INT4;
        pos INT4;
    BEGIN
        FOR i IN 1..string_length LOOP
            pos := 1 + CAST( random() * ( LENGTH(possible_chars) - 1) AS INT4 );
            output := output || substr(possible_chars, pos, 1);
        END LOOP;
        RETURN output;
    END;
    $$$$;
    """
    ??CREATE FUNCTION

### Create SQL schema

[shell pg_1]
    [local sql=
        """
        CREATE TABLE public.users (
          id UUID PRIMARY KEY,
          name TEXT NOT NULL,
          email TEXT NOT NULL
        );

        CREATE TABLE public.projects (
            id UUID PRIMARY KEY,
            title TEXT
        );

        CREATE TABLE public.project_members (
            project_id UUID NOT NULL REFERENCES projects(id),
            user_id UUID NOT NULL REFERENCES users(id),
            role TEXT NOT NULL,
            PRIMARY KEY (project_id, user_id)
        );

        CREATE TABLE public.project_tasks (
          id UUID PRIMARY KEY,
          project_id UUID NOT NULL REFERENCES projects(id),
          description TEXT
        );
        """]
    !$sql
    ??CREATE TABLE
    ??CREATE TABLE
    ??CREATE TABLE
    ??CREATE TABLE

### Seed tables with test data

[shell pg_1]
    """!
    INSERT INTO users
      SELECT gen_random_uuid(), name, name || '@corporate.domain' FROM
    	  (SELECT gen_random_string(8) name FROM generate_series(1, 10000)) _;
    """
    ??INSERT 0 10000

    """!
    INSERT INTO projects
      SELECT gen_random_uuid(), gen_random_string(20) FROM generate_series(1, 1000);
    """
    ??INSERT 0 1000

### Electrify tables

[shell proxy_1]
    [local sql=
        """
        ALTER TABLE public.users ENABLE ELECTRIC;
        ALTER TABLE public.projects ENABLE ELECTRIC;
        ALTER TABLE public.project_members ENABLE ELECTRIC;
        ALTER TABLE public.project_tasks ENABLE ELECTRIC;
        """]
    [invoke migrate_pg "001" $sql]

### Start a client that will subscribe to some shapes

[global user_id_1=1]

[newshell user_1_ws1]
    -$fail_pattern
    [invoke start_elixir_test 1]
    [invoke client_session $user_id_1 1]

    [invoke elixir_client_subscribe "\"users\""]
    [invoke elixir_client_subscribe "{\"projects\", include: [{\"project_members\", over: \"project_id\"}, \
                                                              {\"project_tasks\", over: \"project_id\"}]}"]

[cleanup]
    [invoke teardown]
