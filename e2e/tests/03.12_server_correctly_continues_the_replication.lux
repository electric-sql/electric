[doc When client resumes, server correctly requests stream continuation from the point following the last acknowledged client LSN]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[invoke setup_client 1 "electric_1" 5133]

[shell proxy_1]
  [invoke migrate_items_table 20230504114018]

[shell satellite_1]
  ??[rpc] recv: #SatInStartReplicationResp
  [invoke node_await_table "items"]

  # First write gets propagated
  [invoke node_await_insert "['hello from satellite - first']"]

[shell pg_1]
  [invoke wait-for "SELECT * FROM public.items;" "hello from satellite - first" 10 $psql]

  # Confirm that PG has the record of client's acknowledged LSN after Electric has synced client's transaction.
  !SELECT * FROM electric.acknowledged_client_lsns;
  ?([0-9a-f-]+) \| \\x00000001
  [global client1_id=$1]


[invoke setup_client 2 "electric_1" 5133]

[shell satellite_2]
  ??[rpc] recv: #SatInStartReplicationResp
  [invoke node_await_table "items"]

  # Perform multiple writes to bump the LSN repeatedly
  [invoke node_await_insert "['hello from satellite - client 2 - a']"]
  [invoke node_await_insert "['hello from satellite - client 2 - b']"]
  [invoke node_await_insert "['hello from satellite - client 2 - c']"]

[shell pg_1]
  [invoke wait-for "SELECT * FROM public.items;" "hello from satellite - client 2 - c" 10 $psql]

  # Confirm that PG has the record of client's acknowledged LSN after Electric has synced client's transaction.
  !SELECT * FROM electric.acknowledged_client_lsns ORDER BY lsn;
  ??$client1_id | \x00000001
  ?([0-9a-f-]+) \| \\x00000003
  [global client2_id=$1]


[shell satellite_1]
  [progress stopping client 1]
  !await client.stop(db)
  ?$node

  # Verify that the client retrieves previously stored LSN when it reestablishes the replication connection.
  [progress resuming client 1]
  [invoke electrify_db "originalDb" "electric_1" 5133 "[]"]
  ?$node

  -no previous LSN

  ?+Server sent a replication request to start from 1,
  ?+\[rpc\] send: #SatInStartReplicationReq\{lsn: [a-zA-Z0-9=]+,
  ?\[rpc\] recv: #SatInStartReplicationResp

  # Second write gets propagated
  [invoke node_await_insert "['hello from satellite - second']"]

[shell pg_1]
  [invoke wait-for "SELECT * FROM public.items;" "hello from satellite - second" 10 $psql]

  !SELECT * FROM electric.acknowledged_client_lsns ORDER BY lsn;
  ??$client1_id | \x00000002
  ??$client2_id | \x00000003


[shell satellite_2]
  [progress stopping client 2]
  !await client.stop(db)
  ?$node

  # Verify that the client retrieves previously stored LSN when it reestablishes the replication connection.
  [progress resuming client 2]
  [invoke electrify_db "originalDb" "electric_1" 5133 "[]"]
  ?$node

  -no previous LSN

  ?+Server sent a replication request to start from 3,
  ?+\[rpc\] send: #SatInStartReplicationReq\{lsn: [a-zA-Z0-9=]+,
  ?\[rpc\] recv: #SatInStartReplicationResp

  # Another write gets propagated
  [invoke node_await_insert "['hello from satellite - client 2 - once again']"]

[shell pg_1]
  [invoke wait-for "SELECT * FROM public.items;" "hello from satellite - client 2 - once again" 10 $psql]

  !SELECT * FROM electric.acknowledged_client_lsns ORDER BY lsn;
  ??$client1_id | \x00000002
  ??$client2_id | \x00000004

[cleanup]
  [invoke teardown]
