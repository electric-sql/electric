[doc NodeJS Satellite uses compensations, and column order does not matter]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[invoke setup_client 1 "electric_1" 5133]

# PREPARATION: Set up dependent tables and add a row that will be referenced

[shell proxy_1]
    [local sql=
        """
        CREATE TABLE public.items (
            content VARCHAR NOT NULL,
            id UUID PRIMARY KEY,
            content_text_null VARCHAR,
            content_text_null_default VARCHAR,
            intvalue_null integer,
            intvalue_null_default integer
        );
        ALTER TABLE public.items ENABLE ELECTRIC;
        CREATE TABLE public.other_items (
            content TEXT NOT NULL,
            id TEXT PRIMARY KEY,
            item_id UUID REFERENCES public.items(id)
        );
        ALTER TABLE public.other_items ENABLE ELECTRIC;
        """]
    [invoke migrate_pg "001" $sql]

[shell satellite_1]
    ??[rpc] recv: #SatInStartReplicationResp
    [invoke node_sync_other_items ""]
    ??[proto] recv: #SatSubsDataEnd
    ?$node

    !await client.insert_item(db, "00000000-0000-0000-0000-000000000001", "hello world")
    ??[proto] send: #SatOpLog
    ??[proto] recv: #SatOpLog

    # Disconnect the client
    !db.disconnect()

[shell pg_1]
    # Concurrently, update and then delete the referenced row on the server
    !DELETE FROM public.items WHERE id = '00000000-0000-0000-0000-000000000001';
    ?$psql

[shell satellite_1]
    # On a disconnected client, insert a dependent row
    ?$node
    !await client.insert_other_item(db, "other_test_id_1", "", "00000000-0000-0000-0000-000000000001")
    ?$node


[shell satellite_1]
    # Reconnect the client, expecting no errors to show up
    !db.connect()
    ??[proto] send: #SatOpLog
    ??[proto] recv: #SatOpLog

[shell pg_1]
    # and expect the previously deleted row to be present
    [invoke wait-for "SELECT id, content FROM public.items;" "00000000-0000-0000-0000-000000000001 \| hello world" 10 $psql]
    !\x
    [invoke wait-for "SELECT COUNT(*) FROM public.other_items;" "count \| 1" 10 $psql]

[shell satellite_1]
    # and the client should have the same view of the data
    [invoke node_await_get "hello world"]


[cleanup]
   [invoke teardown]
