[doc NodeJS Satellite uses compensations correctly]
[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[invoke setup_client 1 "electric_1" 5133]

# PREPARATION: Set up dependent tables and add a row that will be referenced

[shell pg_1]
    [invoke migrate_items_table 001]

    [local sql=
        """
        CREATE TABLE public.other_items (
            id TEXT PRIMARY KEY,
            content TEXT NOT NULL,
            item_id UUID REFERENCES public.items(id)
        );
        CALL electric.electrify('public.other_items');
        """]
    [invoke migrate_pg 002 $sql]

[shell satellite_1]
    ??[rpc] recv: #SatInStartReplicationResp
    [invoke node_await_table "other_items"]
    [invoke node_sync_table "other_items"]
    ??[proto] recv: #SatSubsDataEnd
    !await db.db.raw({sql: "UPDATE _electric_meta SET value = 1 WHERE key = 'compensations' RETURNING *"})
    ?$node

    """!await db.db.items.create({
      data: {
        id: "00000000-0000-0000-0000-000000000001",
        content: "hello world"
      }
    })
    """
    ??[proto] send: #SatOpLog
    ??[proto] recv: #SatOpLog

# TEST:
    # Disconnect the client
    !db.notifier.connectivityStateChanged(db.notifier.dbName, 'disconnected')

[shell pg_1]
    # Concurrently, update and then delete the referenced row on the server
    !DELETE FROM public.items WHERE id = '00000000-0000-0000-0000-000000000001';
    ?$psql

[shell satellite_1]
    # On a disconnected client, insert a dependent row
    ?$node
    """!await db.db.other_items.create({
      data: {
        id: "other_test_id_1",
        content: "",
        item_id: "00000000-0000-0000-0000-000000000001"
      }
    })
    """
    ?$node


[shell satellite_1]
    # Reconnect the client, expecting no errors to show up
    !db.notifier.connectivityStateChanged(db.notifier.dbName, 'available')
    ??[proto] send: #SatOpLog
    ??[proto] recv: #SatOpLog

[shell pg_1]
    # and expect the previously deleted row to be present
    !\x
    [invoke wait-for "SELECT content FROM public.items;" "content \| hello world" 10 $psql]
    [invoke wait-for "SELECT COUNT(*) FROM public.other_items;" "count \| 1" 10 $psql]

[shell satellite_1]
    # and the client should have the same view of the data
    [invoke node_await_get "hello world"]


[cleanup]
   [invoke teardown]
