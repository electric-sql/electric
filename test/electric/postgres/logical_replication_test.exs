defmodule Electric.Postgres.LogicalReplicationTest do
  use ExUnit.Case, async: true

  import Electric.Postgres.LogicalReplication

  @known_binary_sequences [
    {"Begin",
     <<66, 0, 0, 0, 2, 167, 244, 168, 128, 0, 2, 48, 246, 88, 88, 213, 242, 0, 0, 2, 107>>},
    {"Commit",
     <<67, 0, 0, 0, 0, 2, 167, 244, 168, 128, 0, 0, 0, 2, 167, 244, 168, 176, 0, 2, 48, 246, 88,
       88, 213, 242>>},
    {"Origin", <<79, 0, 0, 0, 2, 167, 244, 168, 128, "Elmer Fud", 0>>},
    {"Relation",
     <<82, 0, 0, 96, 0, 112, 117, 98, 108, 105, 99, 0, 102, 111, 111, 0, 100, 0, 2, 0, 98, 97,
       114, 0, 0, 0, 0, 25, 255, 255, 255, 255, 1, 105, 100, 0, 0, 0, 0, 23, 255, 255, 255,
       255>>},
    {"Type",
     <<89, 0, 0, 128, 52, 112, 117, 98, 108, 105, 99, 0, 101, 120, 97, 109, 112, 108, 101, 95,
       116, 121, 112, 101, 0>>},
    {"Truncate", <<84, 0, 0, 0, 1, 0, 0, 0, 96, 0>>},
    {"Truncate", <<84, 0, 0, 0, 1, 1, 0, 0, 96, 0>>},
    {"Truncate", <<84, 0, 0, 0, 1, 2, 0, 0, 96, 0>>},
    {"Insert",
     <<73, 0, 0, 96, 0, 78, 0, 2, 116, 0, 0, 0, 3, 98, 97, 122, 116, 0, 0, 0, 3, 53, 54, 48>>},
    {"Insert", <<73, 0, 0, 96, 0, 78, 0, 2, 110, 116, 0, 0, 0, 3, 53, 54, 48>>},
    {"Insert", <<73, 0, 0, 96, 0, 78, 0, 2, 117, 116, 0, 0, 0, 3, 53, 54, 48>>},
    {"Update",
     <<85, 0, 0, 96, 0, 78, 0, 2, 116, 0, 0, 0, 7, 101, 120, 97, 109, 112, 108, 101, 116, 0, 0, 0,
       3, 53, 54, 48>>},
    {"Update",
     <<85, 0, 0, 96, 0, 79, 0, 2, 116, 0, 0, 0, 3, 98, 97, 122, 116, 0, 0, 0, 3, 53, 54, 48, 78,
       0, 2, 116, 0, 0, 0, 7, 101, 120, 97, 109, 112, 108, 101, 116, 0, 0, 0, 3, 53, 54, 48>>},
    {"Update",
     <<85, 0, 0, 96, 0, 75, 0, 2, 116, 0, 0, 0, 3, 98, 97, 122, 110, 78, 0, 2, 116, 0, 0, 0, 7,
       101, 120, 97, 109, 112, 108, 101, 116, 0, 0, 0, 3, 53, 54, 48>>},
    {"Delete",
     <<68, 0, 0, 96, 0, 75, 0, 2, 116, 0, 0, 0, 7, 101, 120, 97, 109, 112, 108, 101, 110>>},
    {"Delete",
     <<68, 0, 0, 96, 0, 79, 0, 2, 116, 0, 0, 0, 3, 98, 97, 122, 116, 0, 0, 0, 3, 53, 54, 48>>}
  ]

  describe "decode and encode operations are exactly reversible:" do
    for {{operation, sequence}, index} <- Enum.with_index(@known_binary_sequences) do
      test "message for #{operation}, sequence ##{index}" do
        assert unquote(sequence) |> decode_message() |> encode_message() == unquote(sequence)
      end
    end
  end
end
