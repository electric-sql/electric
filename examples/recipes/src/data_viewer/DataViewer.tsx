import { Box, Paper } from '@mui/material'
import { useState } from 'react'
import { ColumnDef, TableView } from './TableView'
import { columns, aggregateColumns } from './commerce_orders_columns'
import { QueryBuilder } from './QueryBuilder'
import { ChartView } from './ChartView'
import { Selector } from './Selector'
import { PaginationState, SortingState, useTableData } from './use_table_data'
import { useChartData } from './use_chart_data'

export const DataViewer = () => {
  // Keep a where clause generated by a query builder
  const [whereClause, setWhereClause] = useState('1 = 1')

  return (
    <Paper sx={{ p: 4 }}>
      <Box sx={{ mb: 2, display: 'flex' }}>
        <Box sx={{ flex: 1, mr: 2 }}>
          <QueryBuilder columns={columns} onQueryChanged={setWhereClause} />
        </Box>
        <Box sx={{ flex: 1 }}>
          <ChartDataViewer aggregateCols={aggregateColumns} whereClause={whereClause} />
        </Box>
      </Box>
      <TableDataViewer columns={columns} whereClause={whereClause} />
    </Paper>
  )
}

const TableDataViewer = ({
  columns,
  whereClause,
}: {
  columns: ColumnDef[]
  whereClause: string
}) => {
  // Keep pagination state to only load necessary data
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: 5,
  })

  // Keep an order by clause generated by the sorting of columns
  const [sorting, setSorting] = useState<SortingState[]>([])

  const { orders, totalNumberOfOrders } = useTableData({ sorting, pagination, whereClause })

  return (
    <TableView
      columns={columns}
      rows={orders}
      totalNumberOfRows={totalNumberOfOrders}
      pagination={pagination}
      onPaginationChange={setPagination}
      sorting={sorting}
      onSortingChange={setSorting}
    />
  )
}

const ChartDataViewer = ({
  whereClause,
  aggregateCols,
}: {
  whereClause: string
  aggregateCols: { field: string; headerName: string }[]
}) => {
  // Specify how many values to show
  const [numValuesToShow] = useState(5)

  // The property by which results will be grouped and aggregated
  const [groupProperty, setGroupProperty] = useState(aggregateCols[0].field)

  const { dataset, propertyLabels } = useChartData({
    propertyToChart: groupProperty,
    whereClause,
    maxDistinctPropertyValues: numValuesToShow,
  })

  return (
    <Box sx={{ position: 'relative' }}>
      <Selector
        sx={{ position: 'absolute', right: 0, zIndex: 1 }}
        selectedValue={groupProperty}
        values={aggregateCols.map((c) => c.field)}
        valueLabels={aggregateCols.map((c) => c.headerName)}
        label="Aggregate By"
        onValueSelected={setGroupProperty}
      />
      <ChartView
        xAxis={{
          dataKey: 'month',
          scaleType: 'time',
          label: 'Month',
        }}
        yAxis={{
          label: 'Number of Orders',
          tickMinStep: 1,
        }}
        keysToShow={propertyLabels}
        dataset={dataset}
        height={400}
      />
    </Box>
  )
}
